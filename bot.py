# –§–∞–π–ª: bot.py–±–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Å–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º

import asyncio
import logging
import os
from datetime import datetime, timedelta
import re
import threading
from flask import Flask, request
import sqlite3
import hashlib
import hmac
import aiosqlite

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    LabeledPrice,
    PreCheckoutQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    InputMediaVideo,
    BotCommandScopeChat
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import load_config, DISABLE_SUBSCRIPTION_CHECK
from database import Database
from auction_timer import AuctionTimer
from balance_manager import BalanceManager
from auction_persistence import AuctionPersistence
# from admin_panel import AdminPanel  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
# from api_integration import api_integration  # –û—Ç–∫–ª—é—á–µ–Ω–æ
# from yoomoney_payment import YooMoneyPayment  # –û—Ç–∫–ª—é—á–µ–Ω–æ
# from payment_server import get_notification_queue  # –û—Ç–∫–ª—é—á–µ–Ω–æ

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# --- –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ @ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def filter_description(description: str) -> tuple[str, bool]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —É–¥–∞–ª—è—è —Å—Å—ã–ª–∫–∏ –∏ @ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    
    Args:
        description: –ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        
    Returns:
        tuple: (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å—Ç—å –ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è)
    """
    if not description:
        return description, False
    
    original = description
    has_violations = False
    
    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ (http, https, www, t.me, telegram.me, –¥–æ–º–µ–Ω—ã)
    url_patterns = [
        r'https?://[^\s]+',  # HTTP/HTTPS —Å—Å—ã–ª–∫–∏
        r'www\.[^\s]+',      # www —Å—Å—ã–ª–∫–∏
        r't\.me/[^\s]+',     # t.me —Å—Å—ã–ª–∫–∏
        r'telegram\.me/[^\s]+',  # telegram.me —Å—Å—ã–ª–∫–∏
        r'[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.[a-zA-Z]{2,}[^\s]*',  # –õ—é–±—ã–µ –¥–æ–º–µ–Ω—ã (2+ –±—É–∫–≤)
        r'@[a-zA-Z–∞-—è–ê-–Ø0-9_]+',  # @ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤–∫–ª—é—á–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
    ]
    
    for pattern in url_patterns:
        if re.search(pattern, description, re.IGNORECASE):
            has_violations = True
            description = re.sub(pattern, '[–°–°–´–õ–ö–ê –£–î–ê–õ–ï–ù–ê]', description, flags=re.IGNORECASE)
    
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    description = re.sub(r'\s+', ' ', description).strip()
    
    return description, has_violations

# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()
BOT_TOKEN = config['BOT_TOKEN']
PAYMENTS_PROVIDER_TOKEN = config['PAYMENTS_PROVIDER_TOKEN']
YOOMONEY_RECEIVER = config['YOOMONEY_RECEIVER']
YOOMONEY_SECRET = config['YOOMONEY_SECRET']
YOOMONEY_NOTIFICATION_URL = config['YOOMONEY_NOTIFICATION_URL']
PAYMENT_PLANS = config['PAYMENT_PLANS']
YOOMONEY_BASE_URL = config['YOOMONEY_BASE_URL']
CHANNEL_USERNAME = config['CHANNEL_USERNAME']
CHANNEL_USERNAME_LINK = config['CHANNEL_USERNAME_LINK']
CHANNEL_DISPLAY_NAME = config['CHANNEL_DISPLAY_NAME']
ADMIN_USER_IDS = config['ADMIN_USER_IDS']
DATABASE_PATH = config['DATABASE_PATH']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DATABASE_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤
balance_manager = BalanceManager(DATABASE_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã –ÆMoney (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
# yoomoney_payment = YooMoneyPayment()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞

# --- 3. –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_main_menu(user_balance=None, is_admin=False):
    balance_text = "‚àû" if is_admin else str(user_balance) if user_balance is not None else "?"
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω üöÄ")],
            [
                KeyboardButton(text="–ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã üì¶"),
                KeyboardButton(text=f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥ ({balance_text})")
            ],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_main_menu(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_or_create_user(user_id)
    return get_main_menu(user['balance'], user['is_admin'])

# –°—Ç–∞—Ç–∏—á–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –±–∞–ª–∞–Ω—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback)
main_menu = get_main_menu()

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
def get_duration_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="1 —á–∞—Å", callback_data="duration_3600"),
            InlineKeyboardButton(text="6 —á–∞—Å–æ–≤", callback_data="duration_21600"),
            InlineKeyboardButton(text="12 —á–∞—Å–æ–≤", callback_data="duration_43200"),
        ],
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="duration_86400"),
            InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="duration_259200"),
            InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="duration_604800"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –†–∞–Ω–µ–µ –∑–¥–µ—Å—å –±—ã–ª–∏ inline-–∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã; —É–¥–∞–ª–µ–Ω—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ª–æ—Ç–æ–º (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)
def get_preview_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_auction")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_auction")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_auction")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤ —Å –≤—ã–∫—É–ø–æ–º
def get_bidding_keyboard(blitz_price: int | None):
    rows = [[
        InlineKeyboardButton(text="+100 ‚ÇΩ", callback_data=f"bid:100"),
        InlineKeyboardButton(text="+500 ‚ÇΩ", callback_data=f"bid:500"),
        InlineKeyboardButton(text="+1000 ‚ÇΩ", callback_data=f"bid:1000"),
    ]]
    if blitz_price:
        rows.append([InlineKeyboardButton(text=f"–í—ã–∫—É–ø–∏—Ç—å –∑–∞ {blitz_price} ‚ÇΩ", callback_data="buyout")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# --- 4. –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å aiogram v2/v3
import importlib
try:
    client_default = importlib.import_module("aiogram.client.default")
    enums = importlib.import_module("aiogram.enums")
    DefaultBotProperties = getattr(client_default, "DefaultBotProperties")
    ParseMode = getattr(enums, "ParseMode")
    DEFAULT_BOT_KWARGS = {"default": DefaultBotProperties(parse_mode=ParseMode.HTML)}
except Exception:
    DEFAULT_BOT_KWARGS = {"parse_mode": "HTML"}

# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ---
async def check_user_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        if DISABLE_SUBSCRIPTION_CHECK:
            logging.info(f"Subscription check disabled, user {user_id} considered subscribed")
            return True
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        # member, administrator, creator - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
        # left, kicked - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        logging.info(f"User {user_id} subscription check: status={chat_member.status}, subscribed={is_subscribed}")
        return is_subscribed
    except Exception as e:
        logging.error(f"Error checking subscription for user {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        return False

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN, **DEFAULT_BOT_KWARGS)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
auction_timer = AuctionTimer(bot, db, CHANNEL_USERNAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
auction_persistence = AuctionPersistence(db)

# –ë—É—Ñ–µ—Ä –¥–ª—è –∞–ª—å–±–æ–º–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
album_buffers = {}

# --- YooMoney Webhook Configuration ---
# YOOMONEY_SECRET —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –≤—ã—à–µ

def verify_yoomoney_signature(data, secret, signature):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç YooMoney"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        string_to_sign = f"{data['notification_type']}&{data['operation_id']}&{data['amount']}&{data['currency']}&{data['datetime']}&{data['sender']}&{data['codepro']}&{secret}&{data['label']}"
        
        logging.info(f"–°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {string_to_sign}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º SHA-1 —Ö–µ—à
        calculated_signature = hashlib.sha1(string_to_sign.encode('utf-8')).hexdigest()
        
        logging.info(f"–í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {calculated_signature}")
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {signature}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
        is_valid = hmac.compare_digest(calculated_signature, signature)
        logging.info(f"–ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞: {is_valid}")
        
        return is_valid
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

async def process_payment(data):
    """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        operation_id = data.get('operation_id')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º withdraw_amount (—Å—É–º–º–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        if 'withdraw_amount' in data and data['withdraw_amount']:
            amount = float(data['withdraw_amount'])
        else:
            amount = float(data.get('amount', 0))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞
        if amount == 50:
            publications = 1
        elif amount == 200:
            publications = 5
        elif amount == 350:
            publications = 10
        elif amount == 600:
            publications = 20
        else:
            # –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ–∞–º, –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ 1‚ÇΩ = 1 –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            publications = int(amount)
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ label
        user_id = None
        if 'label' in data and data['label']:
            label = data['label']
            if label.startswith('user_'):
                try:
                    user_id = int(label.replace('user_', ''))
                except ValueError:
                    pass
        
        # –ï—Å–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º sender
        if not user_id and 'sender' in data:
            try:
                user_id = int(data['sender'])
            except ValueError:
                pass
        
        if not user_id:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
        async with aiosqlite.connect(DATABASE_PATH) as db_conn:
            cursor = await db_conn.execute(
                "SELECT operation_id FROM processed_payments WHERE operation_id = ?",
                (operation_id,)
            )
            if await cursor.fetchone():
                logging.warning(f"–ü–ª–∞—Ç–µ–∂ {operation_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω)
            await db_conn.execute(
                "INSERT OR IGNORE INTO processed_payments (operation_id, user_id, amount, publications) VALUES (?, ?, ?, ?)",
                (operation_id, user_id, amount, publications)
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db_conn.execute(
                "INSERT OR IGNORE INTO users (user_id, username, full_name, balance, is_admin) VALUES (?, ?, ?, ?, ?)",
                (user_id, None, None, 0, False)
            )
            
            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            await db_conn.execute(
                "UPDATE users SET balance = balance + ? WHERE user_id = ?",
                (publications, user_id)
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await db_conn.execute(
                "INSERT INTO transactions (user_id, amount, transaction_type, description) VALUES (?, ?, ?, ?)",
                (user_id, publications, "yoomoney_payment", f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {amount} —Ä—É–±. (–æ–ø–µ—Ä–∞—Ü–∏—è {operation_id})")
            )
            
            await db_conn.commit()
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id,
                f"‚úÖ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logging.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Å—É–º–º–∞ {amount} —Ä—É–±., –ø—É–±–ª–∏–∫–∞—Ü–∏–π {publications}")
        return True
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ ---
class AuctionCreation(StatesGroup):
    waiting_for_photos = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_blitz_price = State()
    waiting_for_duration = State()

# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–π—Ç –ø–æ—Å—Ç–∞ ---
class BuyPostCreation(StatesGroup):
    waiting_for_photos = State()
    waiting_for_description = State()
    waiting_for_price = State()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_or_create_user(user_id, username, full_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    logging.info(f"Checking admin status for user {user_id}")
    logging.info(f"ADMIN_USER_IDS: {ADMIN_USER_IDS} (type: {type(ADMIN_USER_IDS)})")
    is_admin = user_id in ADMIN_USER_IDS
    logging.info(f"User {user_id} is admin: {is_admin}")
    if is_admin and not user['is_admin']:
        await db.grant_admin_status(user_id)
        user['is_admin'] = True
        logging.info(f"Granted admin status to user {user_id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin:
        await set_admin_commands(user_id)
    
    # –£–±–∏—Ä–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫—É–ø–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–æ: 05.09.2025 - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤

    balance_text = "‚àû (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)" if user['is_admin'] else f"{user['balance']}"

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dynamic_menu = get_main_menu(user['balance'], user['is_admin'])

    welcome_text = f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤!</b>\n\n"
    welcome_text += f"üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
    welcome_text += f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n"
    welcome_text += f"‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ—Ä–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
    welcome_text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞–≤–∫–∞–º–∏ –∏ –±–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∞–º–∏\n"
    welcome_text += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤\n\n"
    welcome_text += f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance_text} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
    welcome_text += f"üì¢ <b>–í–∞–∂–Ω–æ:</b> –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª <a href='https://t.me/{CHANNEL_USERNAME_LINK}'>–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ –°–ü–ë</a>\n\n"
    welcome_text += f"üöÄ <b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"

    await message.answer(
        welcome_text,
        reply_markup=dynamic_menu,
        parse_mode="HTML"
    )


# --- –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π ---
@dp.message(Command("update_admin"))
async def update_admin_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    if user_id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        success = await db.grant_admin_status(user_id)
        
        if success:
            await message.answer(
                "‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤.")
            
    except Exception as e:
        logging.error(f"Error updating admin status: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤.")

@dp.message(Command("check_admin"))
async def check_admin_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    is_admin_in_config = user_id in ADMIN_USER_IDS
    is_admin_in_db = user['is_admin']
    
    status_text = f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
    status_text += f"üë§ –í–∞—à ID: {user_id}\n"
    status_text += f"‚öôÔ∏è –í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {'‚úÖ –î–∞' if is_admin_in_config else '‚ùå –ù–µ—Ç'}\n"
    status_text += f"üíæ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –î–∞' if is_admin_in_db else '‚ùå –ù–µ—Ç'}\n"
    status_text += f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {list(ADMIN_USER_IDS)}\n\n"
    
    if is_admin_in_config and is_admin_in_db:
        status_text += "üéâ <b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞!</b>"
    elif is_admin_in_config and not is_admin_in_db:
        status_text += "‚ö†Ô∏è <b>–í—ã –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤, –Ω–æ –ø—Ä–∞–≤–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.</b>\n"
        status_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /update_admin –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
    else:
        status_text += "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤.</b>"
    
    await message.answer(status_text, parse_mode="HTML")

@dp.message(Command("add_balance"))
async def add_balance_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /add_balance <user_id> <amount>
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_balance <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—É–±–ª–∏–∫–∞—Ü–∏–π>")
            return
        
        target_user_id = int(parts[1])
        amount = int(parts[2])
        
        if amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = await db.get_or_create_user(target_user_id)
        current_balance = target_user['balance']
        new_balance = current_balance + amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await db.update_user_balance(target_user_id, new_balance)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.add_transaction(target_user_id, amount, 'admin_grant', f'–ù–∞—á–∏—Å–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {amount} –ø—É–±–ª–∏–∫–∞—Ü–∏–π')
        
        await message.answer(
            f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n"
            f"üí∞ –ë—ã–ª–æ: {current_balance} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            f"üí∞ –°—Ç–∞–ª–æ: {new_balance} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_balance <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
    except Exception as e:
        logging.error(f"Error adding balance: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")

@dp.message(Command("sync_payments"))
async def sync_payments_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å Railway (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import sqlite3
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT operation_id, user_id, amount, publications, processed_at 
                FROM processed_payments 
                ORDER BY processed_at DESC 
                LIMIT 10
            """)
            payments = cursor.fetchall()
        
        if not payments:
            await message.answer("üìã –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n\n"
        for payment in payments:
            text += f"üîë –û–ø–µ—Ä–∞—Ü–∏—è: {payment[0]}\n"
            text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment[1]}\n"
            text += f"üí∞ –°—É–º–º–∞: {payment[2]} ‚ÇΩ\n"
            text += f"üìù –ü—É–±–ª–∏–∫–∞—Ü–∏–π: {payment[3]}\n"
            text += f"‚è∞ –í—Ä–µ–º—è: {payment[4]}\n\n"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Error syncing payments: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π.")

@dp.message(Command("manual_payment"))
async def manual_payment_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /manual_payment <user_id> <amount> <description>
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer(
                "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/manual_payment &lt;user_id&gt; &lt;amount&gt; &lt;description&gt;\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/manual_payment 7647551803 1 –†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ 50 —Ä—É–±",
                parse_mode="HTML"
            )
            return
        
        target_user_id = int(parts[1])
        amount = int(parts[2])
        description = " ".join(parts[3:]) if len(parts) > 3 else "–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        success = await balance_manager.update_user_balance(
            target_user_id, 
            amount, 
            "admin_manual_payment", 
            description
        )
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await balance_manager.get_user_balance(target_user_id)
            
            await message.answer(
                f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n"
                f"üí∞ –°—É–º–º–∞: {amount} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_info['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    target_user_id,
                    f"‚úÖ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                    f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {amount} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {description}\n"
                    f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_info['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                    parse_mode="HTML"
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /manual_payment <user_id> <amount> <description>")
    except Exception as e:
        logging.error(f"Error in manual payment: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("check_payment"))
async def check_payment_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /check_payment <operation_id>
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer(
                "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/check_payment &lt;operation_id&gt;\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/check_payment 81046042603529710",
                parse_mode="HTML"
            )
            return
        
        operation_id = parts[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
        import sqlite3
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT operation_id, user_id, amount, publications, processed_at 
                FROM processed_payments 
                WHERE operation_id = ?
            """, (operation_id,))
            payment = cursor.fetchone()
        
        if payment:
            await message.answer(
                f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                f"üîë –û–ø–µ—Ä–∞—Ü–∏—è: {payment[0]}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment[1]}\n"
                f"üí∞ –°—É–º–º–∞: {payment[2]} ‚ÇΩ\n"
                f"üìù –ü—É–±–ª–∏–∫–∞—Ü–∏–π: {payment[3]}\n"
                f"‚è∞ –í—Ä–µ–º—è: {payment[4]}",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                f"üîë –û–ø–µ—Ä–∞—Ü–∏—è: {operation_id}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω webhook'–æ–º\n"
                f"‚Ä¢ Webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ)\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logging.error(f"Error checking payment: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

# –õ–∏—à–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã

@dp.message(Command("payment_status"))
async def payment_status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db.get_or_create_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = await balance_manager.get_transaction_history(user_id, 5)
    
    status_text = f"üí≥ <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
    status_text += f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
    
    if transactions:
        status_text += f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
        for t in transactions:
            amount_str = f"+{t['amount']}" if t['amount'] > 0 else str(t['amount'])
            status_text += f"‚Ä¢ {amount_str} - {t['description']}\n"
            status_text += f"  <i>{t['created_at']}</i>\n\n"
    else:
        status_text += f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n"
    
    status_text += f"üîó <b>Webhook URL:</b> {YOOMONEY_NOTIFICATION_URL}\n"
    status_text += f"üè¶ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {YOOMONEY_RECEIVER}\n\n"
    status_text += f"üí° <b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /top_up</b>"
    
    await message.answer(status_text, parse_mode="HTML")


# --- –•–µ–Ω–¥–ª–µ—Ä "–ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã" ---
@dp.message(F.text == "–ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã üì¶")
async def my_auctions(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_auctions = await db.get_user_auctions(user_id, 'active')
    
    if not active_auctions:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ (–∞—É–∫—Ü–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏).")
        return
    
    text = f"üì¶ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã ({len(active_auctions)}):</b>\n"
    text += f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∞—É–∫—Ü–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏</i>\n\n"
    
    for auction in active_auctions:
        time_left = await auction_timer.get_auction_time_left(auction['end_time'])
        text += f"üÜî <b>ID:</b> {auction['id']}\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {auction['description'][:50]}{'...' if len(auction['description']) > 50 else ''}\n"
        text += f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {auction['current_price']} ‚ÇΩ\n"
        text += f"‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left}\n"
        text += f"üëë <b>–õ–∏–¥–µ—Ä:</b> @{auction['current_leader_username'] if auction['current_leader_username'] else '–ù–µ—Ç'}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
    keyboard_buttons = []
    for auction in active_auctions:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üìä –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ (ID: {auction['id']})", 
                callback_data=f"history_{auction['id']}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# --- –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_auctions = await db.get_user_auctions(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ (–Ω–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    active_count = await db.get_truly_active_auctions_count(user_id)
    sold_count = len([a for a in all_auctions if a['status'] == 'sold'])
    expired_count = len([a for a in all_auctions if a['status'] == 'expired'])
    
    text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    text += f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
    text += f"üöÄ <b>–í—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:</b> {len(all_auctions)}\n"
    text += f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {active_count}\n"
    text += f"‚úÖ <b>–ü—Ä–æ–¥–∞–Ω–Ω—ã—Ö:</b> {sold_count}\n"
    text += f"‚è∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:</b> {expired_count}\n"
    
    if user['is_admin']:
        text += f"\nüëë <b>–°—Ç–∞—Ç—É—Å:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await message.answer(text, reply_markup=admin_keyboard, parse_mode="HTML")
    else:
        await message.answer(text, parse_mode="HTML")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ---
@dp.message(F.text.startswith("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥"))
async def top_up_balance(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if user['is_admin']:
        await message.answer("–£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∫ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 –ø—É–±–ª–∏–∫–∞—Ü–∏—è - 50‚ÇΩ", callback_data="buy_1"),
            InlineKeyboardButton(text="5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π - 200‚ÇΩ", callback_data="buy_5")
        ],
        [
            InlineKeyboardButton(text="10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π - 350‚ÇΩ", callback_data="buy_10"),
            InlineKeyboardButton(text="20 –ø—É–±–ª–∏–∫–∞—Ü–∏–π - 600‚ÇΩ", callback_data="buy_20")
        ]
    ])
    
    await message.answer(
        f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"üí∞ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("buy_"))
async def handle_purchase(callback: types.CallbackQuery):
    try:
        plan_id = callback.data.replace("buy_", "")
        
        if plan_id not in PAYMENT_PLANS:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.", show_alert=True)
            return
        
        user_id = callback.from_user.id
        plan = PAYMENT_PLANS[plan_id]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # payment_url = yoomoney_payment.generate_payment_url(plan_id, user_id)
        payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YOOMONEY_RECEIVER}&quickpay-form=shop&targets={plan['description']}&sum={plan['price']}&label=user_{user_id}"
        
        if not payment_url:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –ø–ª–∞—Ç–µ–∂
        has_recent_payment = await db.has_recent_payment(user_id, minutes=10)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        if has_recent_payment:
            payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {plan['price']}‚ÇΩ", url=payment_url)],
                [InlineKeyboardButton(text="‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª", callback_data=f"payment_success_{plan_id}")]
            ])
        else:
            payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {plan['price']}‚ÇΩ", url=payment_url)],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{plan_id}")]
            ])
        
        if has_recent_payment:
            # –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            await callback.message.answer(
                f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {plan['price']} ‚ÇΩ\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {plan['description']}\n\n"
                f"–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.",
                reply_markup=payment_keyboard,
                parse_mode="HTML"
            )
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
            await callback.message.answer(
                f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - {plan['description']}</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {plan['price']} ‚ÇΩ\n\n"
                f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {plan['price']}‚ÇΩ'\n"
                f"2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ –ÆMoney\n"
                f"3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'\n\n"
                f"‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ:</b> –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!",
                reply_markup=payment_keyboard,
                parse_mode="HTML"
            )

        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error creating payment link: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query(F.data.startswith("check_payment_"))
async def handle_payment_check(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        plan_id = callback.data.replace("check_payment_", "")
        user_id = callback.from_user.id
        user = await db.get_or_create_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if user['is_admin']:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∫ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –ø–ª–∞—Ç–µ–∂
        has_recent_payment = await db.has_recent_payment(user_id, minutes=10)
        
        if has_recent_payment:
            # –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.answer(
                f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ!\n\n"
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
                f"–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ"
            try:
                await callback.message.edit_reply_markup(
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {PAYMENT_PLANS[plan_id]['price']}‚ÇΩ", url=f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YOOMONEY_RECEIVER}&quickpay-form=shop&targets={PAYMENT_PLANS[plan_id]['description']}&sum={PAYMENT_PLANS[plan_id]['price']}&label=user_{user_id}")],
                        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"payment_success_{plan_id}")]
                    ])
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É: {e}")
        else:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è
            await callback.answer(
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...\n\n"
                f"üí° –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ÆMoney.\n"
                f"–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 –º–∏–Ω—É—Ç—ã.",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            try:
                await callback.message.edit_reply_markup(
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {PAYMENT_PLANS[plan_id]['price']}‚ÇΩ", url=f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YOOMONEY_RECEIVER}&quickpay-form=shop&targets={PAYMENT_PLANS[plan_id]['description']}&sum={PAYMENT_PLANS[plan_id]['price']}&label=user_{user_id}")],
                        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{plan_id}")]
                    ])
                )
            except Exception as e:
                logging.error(f"Error updating keyboard: {e}")
        
    except Exception as e:
        logging.error(f"Error checking payment status: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query(F.data.startswith("payment_success_"))
async def handle_payment_success(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª'"""
    await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)


@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ÆMoney

# --- –•–µ–Ω–¥–ª–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ ---
@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω üöÄ")
async def start_auction_creation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    is_admin_user = user['is_admin']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    if not is_admin_user:
        is_subscribed = await check_user_subscription(user_id)
        if not is_subscribed:
            user_menu = await get_user_main_menu(user_id)
            await message.answer(
                f"‚ùå <b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª!</b>\n\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: <a href='https://t.me/{CHANNEL_USERNAME_LINK}'>–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ –°–ü–ë</a>\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω —Å–Ω–æ–≤–∞.",
                reply_markup=user_menu,
                parse_mode="HTML"
            )
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, –∞ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    current_state = await state.get_state()
    if current_state:
        if current_state == AuctionCreation.waiting_for_photos.state:
            user_menu = await get_user_main_menu(user_id)
            await message.answer(
                "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ —Ö–≤–∞—Ç–∏—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞–ª–µ–µ¬ª.\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
                reply_markup=user_menu
            )
            return
        if current_state == AuctionCreation.waiting_for_description.state:
            user_menu = await get_user_main_menu(user_id)
            await message.answer(
                "–§–æ—Ç–æ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
                reply_markup=user_menu
            )
            return
        if current_state == AuctionCreation.waiting_for_price.state:
            user_menu = await get_user_main_menu(user_id)
            await message.answer(
                "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–æ–¥–Ω–æ —á–∏—Å–ª–æ).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
                reply_markup=user_menu
            )
            return
        if current_state == AuctionCreation.waiting_for_blitz_price.state:
            user_menu = await get_user_main_menu(user_id)
            await message.answer(
                "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ª–Ω–æ–≥–æ –≤—ã–∫—É–ø–∞ (–±–ª–∏—Ü-—Ü–µ–Ω–∞), –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π.\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
                reply_markup=user_menu
            )
            return
        if current_state == AuctionCreation.waiting_for_duration.state:
            await message.answer(
                "–¶–µ–Ω–∞ —É–∂–µ —É–∫–∞–∑–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞:",
                reply_markup=get_duration_keyboard(),
            )
            return

    await state.set_state(AuctionCreation.waiting_for_photos)
    await state.update_data(media=[])
    user_menu = await get_user_main_menu(user_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Ä–∞–∑–æ–º (–∞–ª—å–±–æ–º–æ–º) –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=user_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ
@dp.message(StateFilter('*'), F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    user_menu = await get_user_main_menu(message.from_user.id)
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=user_menu)

@dp.message(StateFilter(AuctionCreation.waiting_for_photos), (F.photo | F.video))
async def process_photo(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º (media_group), –∫–æ–ø–∏–º —Ñ–æ—Ç–æ –≤ –±—É—Ñ–µ—Ä–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    if message.media_group_id:
        key = (message.from_user.id, message.media_group_id)
        buf = album_buffers.get(key) or {"media": [], "task": None}
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ file_id
        if message.photo:
            item = {"type": "photo", "file_id": message.photo[-1].file_id, "order": message.message_id}
        else:
            item = {"type": "video", "file_id": message.video.file_id, "order": message.message_id}
        if len(buf["media"]) < 10:
            buf["media"].append(item)
        album_buffers[key] = buf

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
        if buf["task"] and not buf["task"].done():
            buf["task"].cancel()

        async def finalize_after_delay():
            try:
                await asyncio.sleep(1.2)
            except asyncio.CancelledError:
                return
            local_buf = album_buffers.pop(key, None)
            if not local_buf:
                return
            data_inner = await state.get_data()
            media_inner = list(data_inner.get("media", []))
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–∞ –ø–æ message_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            ordered = sorted(local_buf["media"], key=lambda m: m.get("order", 0))
            media_inner.extend(ordered)  # —É–∂–µ –Ω–µ –±–æ–ª—å—à–µ 10
            media_inner = media_inner[:10]
            await state.update_data(media=media_inner)
            await state.set_state(AuctionCreation.waiting_for_description)
            user_menu = await get_user_main_menu(message.from_user.id)
            await message.answer(
                "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
                reply_markup=user_menu,
            )

        buf["task"] = asyncio.create_task(finalize_after_delay())
        album_buffers[key] = buf
        return

    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ ‚Äî —Å—Ä–∞–∑—É –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
    data = await state.get_data()
    media = list(data.get("media", []))
    if len(media) >= 10:
        user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 10 —Ñ–æ—Ç–æ.", reply_markup=user_menu)
        return
    if message.photo:
        media.append({"type": "photo", "file_id": message.photo[-1].file_id})
    else:
        media.append({"type": "video", "file_id": message.video.file_id})
    await state.update_data(media=media)
    await state.set_state(AuctionCreation.waiting_for_description)
    user_menu = await get_user_main_menu(message.from_user.id)
    await message.answer(
        "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
        reply_markup=user_menu,
    )

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª (document)
@dp.message(StateFilter(AuctionCreation.waiting_for_photos), F.document)
async def process_photo_document(message: types.Message, state: FSMContext):
    try:
        mime_type = message.document.mime_type or ""
    except Exception:
        mime_type = ""

    if mime_type.startswith("image/") or mime_type.startswith("video/"):
        data = await state.get_data()
        media = list(data.get("media", []))
        if len(media) >= 10:
            user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 10 –º–µ–¥–∏–∞.", reply_markup=user_menu)
        return
        media.append({"type": "video" if mime_type.startswith("video/") else "photo", "file_id": message.document.file_id})
        await state.update_data(media=media)
        await state.set_state(AuctionCreation.waiting_for_description)
        user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer(
            "–ú–µ–¥–∏–∞ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
            reply_markup=user_menu,
        )
    else:
        user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=user_menu)

# –¢–µ–∫—Å—Ç –Ω–∞ —à–∞–≥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ–¥–∏–Ω —Ä–∞–∑
@dp.message(StateFilter(AuctionCreation.waiting_for_photos), F.text)
async def handle_text_on_photos_step(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("hint_shown_on_photos"):
        await state.update_data(hint_shown_on_photos=True)
        user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∞–ª—å–±–æ–º–æ–º (–¥–æ 10) –∏–ª–∏ –æ–¥–Ω–æ –º–µ–¥–∏–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π.",
            reply_markup=user_menu,
        )

@dp.message(StateFilter(AuctionCreation.waiting_for_description), F.text)
async def process_description(message: types.Message, state: FSMContext):
    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —Å—Å—ã–ª–æ–∫ –∏ @ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    filtered_description, has_violations = filter_description(message.text)
    
    if has_violations:
        await message.answer(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ò–∑ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –∏ @ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
            f"<b>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{filtered_description}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="confirm_filtered_description")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_description")]
            ]),
            parse_mode="HTML"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(filtered_description=filtered_description)
        return
    
    # –ï—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    await state.update_data(description=filtered_description)
    await state.set_state(AuctionCreation.waiting_for_price)
    user_menu = await get_user_main_menu(message.from_user.id)
    await message.answer(
        "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
        reply_markup=user_menu,
    )

@dp.message(StateFilter(AuctionCreation.waiting_for_price), F.text)
async def process_price(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1000</code>")
        return
    start_price = int(text)
    await state.update_data(start_price=start_price)
    await state.set_state(AuctionCreation.waiting_for_blitz_price)
    user_menu = await get_user_main_menu(message.from_user.id)
    await message.answer(
        "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ª–Ω–æ–≥–æ –≤—ã–∫—É–ø–∞ (–±–ª–∏—Ü-—Ü–µ–Ω–∞), –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π.",
        reply_markup=user_menu,
    )

@dp.message(StateFilter(AuctionCreation.waiting_for_blitz_price), F.text)
async def process_blitz_price(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5000</code>")
        return
    data = await state.get_data()
    start_price = int(data.get("start_price", 0))
    blitz_price = int(text)
    if blitz_price < start_price:
        await message.answer("–ë–ª–∏—Ü-—Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(blitz_price=blitz_price)
    await state.set_state(AuctionCreation.waiting_for_duration)
    await message.answer("–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞:", reply_markup=get_duration_keyboard())

@dp.callback_query(StateFilter(AuctionCreation.waiting_for_duration), F.data.startswith("duration_"))
async def process_duration(callback: types.CallbackQuery, state: FSMContext):
    duration_seconds = int(callback.data.split("_")[1])
    end_time = datetime.now() + timedelta(seconds=duration_seconds)
    await state.update_data(duration=duration_seconds, end_time=end_time, end_time_str=end_time.strftime("%d.%m.%Y %H:%M"))
    
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–∫—Ü–∏–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    auction_id = await db.create_auction(
        owner_id=callback.from_user.id,
        description=data['description'],
        start_price=data['start_price'],
        blitz_price=data['blitz_price'],
        end_time=end_time,
        media_files=data['media']
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≤–Ω–µ—à–Ω–∏–º API (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    try:
        auction_data = {
            "id": auction_id,
            "description": data['description'],
            "start_price": data['start_price'],
            "blitz_price": data['blitz_price'],
            "end_time": end_time.isoformat(),
            "owner_id": callback.from_user.id,
            "media_count": len(data['media'])
        }
        # await api_integration.sync_auction_to_external(auction_data)  # –û—Ç–∫–ª—é—á–µ–Ω–æ
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω —Å –≤–Ω–µ—à–Ω–∏–º API: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await state.update_data(auction_id=auction_id)

    media_list = data.get('media', [])
    caption_text = (
        f"<b>{data['description']}</b>\n\n"
        f"<b>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {data['start_price']} ‚ÇΩ\n"
        f"<b>–ë–ª–∏—Ü-—Ü–µ–Ω–∞:</b> {data['blitz_price']} ‚ÇΩ\n"
        f"<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {data['end_time_str']}\n"
        f"–ú–µ–¥–∏–∞: {len(media_list)} —à—Ç."
    )
    
    await callback.message.delete()
    first_media = media_list[0] if media_list else None
    if first_media and first_media.get('type') == 'video':
        await callback.message.answer_video(
            video=first_media['file_id'],
            caption=f"<b>--- –ü–†–ï–î–ü–†–û–°–ú–û–¢–† ---</b>\n\n{caption_text}",
            reply_markup=get_preview_keyboard(),
            parse_mode="HTML"
        )
    else:
        first_file_id = first_media['file_id'] if first_media else None
        await callback.message.answer_photo(
            photo=first_file_id,
            caption=f"<b>--- –ü–†–ï–î–ü–†–û–°–ú–û–¢–† ---</b>\n\n{caption_text}",
            reply_markup=get_preview_keyboard(),
            parse_mode="HTML"
        )
    await state.clear()
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–π—Ç –ø–æ—Å—Ç–∞ ---
@dp.message(StateFilter(BuyPostCreation.waiting_for_photos), (F.photo | F.video))
async def process_buy_post_photo(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º (media_group), –∫–æ–ø–∏–º —Ñ–æ—Ç–æ –≤ –±—É—Ñ–µ—Ä–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    if message.media_group_id:
        key = (message.from_user.id, message.media_group_id)
        buf = album_buffers.get(key) or {"media": [], "task": None}
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ file_id
        if message.photo:
            item = {"type": "photo", "file_id": message.photo[-1].file_id, "order": message.message_id}
        else:
            item = {"type": "video", "file_id": message.video.file_id, "order": message.message_id}
        if len(buf["media"]) < 10:
            buf["media"].append(item)
        album_buffers[key] = buf

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
        if buf["task"] and not buf["task"].done():
            buf["task"].cancel()

        async def finalize_after_delay():
            try:
                await asyncio.sleep(1.2)
            except asyncio.CancelledError:
                return
            local_buf = album_buffers.pop(key, None)
            if not local_buf:
                return
            data_inner = await state.get_data()
            media_inner = list(data_inner.get("media", []))
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–∞ –ø–æ message_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            ordered = sorted(local_buf["media"], key=lambda m: m.get("order", 0))
            media_inner.extend(ordered)  # —É–∂–µ –Ω–µ –±–æ–ª—å—à–µ 10
            media_inner = media_inner[:10]
            await state.update_data(media=media_inner)
            await state.set_state(BuyPostCreation.waiting_for_description)
            user_menu = await get_user_main_menu(message.from_user.id)
            await message.answer(
                "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
                reply_markup=user_menu,
            )

        buf["task"] = asyncio.create_task(finalize_after_delay())
        album_buffers[key] = buf
        return

    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ ‚Äî —Å—Ä–∞–∑—É –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
    data = await state.get_data()
    media = list(data.get("media", []))
    if len(media) >= 10:
        user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 10 —Ñ–æ—Ç–æ.", reply_markup=user_menu)
        return
    if message.photo:
        media.append({"type": "photo", "file_id": message.photo[-1].file_id})
    else:
        media.append({"type": "video", "file_id": message.video.file_id})
    await state.update_data(media=media)
    await state.set_state(BuyPostCreation.waiting_for_description)
    user_menu = await get_user_main_menu(message.from_user.id)
    await message.answer(
        "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
        reply_markup=user_menu,
    )

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª (document) –¥–ª—è –±–∞–π—Ç –ø–æ—Å—Ç–∞
@dp.message(StateFilter(BuyPostCreation.waiting_for_photos), F.document)
async def process_buy_post_photo_document(message: types.Message, state: FSMContext):
    try:
        mime_type = message.document.mime_type or ""
    except Exception:
        mime_type = ""

    if mime_type.startswith("image/") or mime_type.startswith("video/"):
        data = await state.get_data()
        media = list(data.get("media", []))
        if len(media) >= 10:
            user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 10 –º–µ–¥–∏–∞.", reply_markup=user_menu)
        return
        media.append({"type": "video" if mime_type.startswith("video/") else "photo", "file_id": message.document.file_id})
        await state.update_data(media=media)
        await state.set_state(BuyPostCreation.waiting_for_description)
        user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer(
            "–ú–µ–¥–∏–∞ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
            reply_markup=user_menu,
        )
    else:
        user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=user_menu)

# –¢–µ–∫—Å—Ç –Ω–∞ —à–∞–≥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –±–∞–π—Ç –ø–æ—Å—Ç–∞
@dp.message(StateFilter(BuyPostCreation.waiting_for_photos), F.text)
async def handle_text_on_buy_post_photos_step(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("hint_shown_on_photos"):
        await state.update_data(hint_shown_on_photos=True)
        user_menu = await get_user_main_menu(message.from_user.id)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∞–ª—å–±–æ–º–æ–º (–¥–æ 10) –∏–ª–∏ –æ–¥–Ω–æ –º–µ–¥–∏–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π.",
            reply_markup=user_menu,
        )

@dp.message(StateFilter(BuyPostCreation.waiting_for_description), F.text)
async def process_buy_post_description(message: types.Message, state: FSMContext):
    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —Å—Å—ã–ª–æ–∫ –∏ @ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    filtered_description, has_violations = filter_description(message.text)
    
    if has_violations:
        await message.answer(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ò–∑ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –∏ @ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
            f"<b>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{filtered_description}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="confirm_filtered_buy_post_description")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_buy_post_description")]
            ]),
            parse_mode="HTML"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(filtered_description=filtered_description)
        return
    
    # –ï—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    await state.update_data(description=filtered_description)
    await state.set_state(BuyPostCreation.waiting_for_price)
    user_menu = await get_user_main_menu(message.from_user.id)
    await message.answer(
        "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>",
        reply_markup=user_menu,
    )

@dp.message(StateFilter(BuyPostCreation.waiting_for_price), F.text)
async def process_buy_post_price(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1000</code>")
        return
    price = int(text)
    await state.update_data(price=price)
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    buy_post_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", url="https://t.me/+DYI1hAaTWy0wOTAy")]
    ])
    
    media_list = data.get('media', [])
    caption_text = (
        f"<b>{data['description']}</b>\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {data['price']} ‚ÇΩ\n\n"
        f"<b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá</b>"
    )
    
    first_media = media_list[0] if media_list else None
    if first_media and first_media.get('type') == 'video':
        await message.answer_video(
            video=first_media['file_id'],
            caption=f"<b>--- –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ë–ê–ô–¢ –ü–û–°–¢–ê ---</b>\n\n{caption_text}",
            reply_markup=buy_post_keyboard,
            parse_mode="HTML"
        )
    else:
        first_file_id = first_media['file_id'] if first_media else None
        await message.answer_photo(
            photo=first_file_id,
            caption=f"<b>--- –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ë–ê–ô–¢ –ü–û–°–¢–ê ---</b>\n\n{caption_text}",
            reply_markup=buy_post_keyboard,
            parse_mode="HTML"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–∞–π—Ç –ø–æ—Å—Ç", callback_data="publish_buy_post")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_buy_post")]
    ])
    
    await message.answer(
        "–ë–∞–π—Ç –ø–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ.",
        reply_markup=confirm_keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await state.update_data(
        post_media=media_list,
        post_description=data['description'],
        post_price=data['price'],
        preview_caption=caption_text
    )

# --- –•–µ–Ω–¥–ª–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º ---
@dp.callback_query(F.data == "delete_auction")
async def delete_auction(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_auctions = await db.get_user_auctions(callback.from_user.id)
    if user_auctions:
        latest_auction = user_auctions[0]  # –°–∞–º—ã–π –Ω–æ–≤—ã–π
        await db.update_auction_status(latest_auction['id'], 'deleted')
    
    await callback.message.delete()
    user_menu = await get_user_main_menu(callback.from_user.id)
    await callback.message.answer("–ê—É–∫—Ü–∏–æ–Ω —É–¥–∞–ª–µ–Ω.", reply_markup=user_menu)
    await callback.answer()

@dp.callback_query(F.data == "edit_auction")
async def edit_auction(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await start_auction_creation(callback.message, state) # –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–∞–π—Ç –ø–æ—Å—Ç–∞
@dp.callback_query(F.data == "publish_buy_post")
async def publish_buy_post(callback: types.CallbackQuery, state: FSMContext):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–∞–π—Ç –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    post_media = data.get('post_media', [])
    post_description = data.get('post_description', '')
    post_price = data.get('post_price', 0)
    
    if not post_media or not post_description:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    caption_text = (
        f"<b>{post_description}</b>\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {post_price} ‚ÇΩ\n\n"
        f"<b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá</b>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    buy_post_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", url="https://t.me/+DYI1hAaTWy0wOTAy")]
    ])
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        first_media = post_media[0] if post_media else None
        if first_media and first_media.get('type') == 'video':
            posted_message = await bot.send_video(
                chat_id=CHANNEL_USERNAME,
                video=first_media['file_id'],
                caption=caption_text,
                reply_markup=buy_post_keyboard
            )
        else:
            first_file_id = first_media['file_id'] if first_media else None
            posted_message = await bot.send_photo(
                chat_id=CHANNEL_USERNAME,
                photo=first_file_id,
                caption=caption_text,
                reply_markup=buy_post_keyboard
            )
        
        await callback.message.edit_text("‚úÖ –ë–∞–π—Ç –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Failed to publish buy post: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)

@dp.callback_query(F.data == "cancel_buy_post")
async def cancel_buy_post(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–π—Ç –ø–æ—Å—Ç–∞"""
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–π—Ç –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "publish_auction")
async def check_balance_before_publish(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    is_admin_user = user['is_admin']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    if not is_admin_user:
        is_subscribed = await check_user_subscription(user_id)
        if not is_subscribed:
            user_menu = await get_user_main_menu(user_id)
            await callback.message.answer(
                f"‚ùå <b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª!</b>\n\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: <a href='https://t.me/{CHANNEL_USERNAME_LINK}'>–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ –°–ü–ë</a>\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω —Å–Ω–æ–≤–∞.",
                reply_markup=user_menu,
                parse_mode="HTML"
            )
            await callback.answer()
            return

    if is_admin_user or user['balance'] > 0:
        if not is_admin_user:
            # –°–ø–∏—Å—ã–≤–∞–µ–º 1 –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            await db.update_user_balance(
                user_id=user_id,
                amount=-1,
                transaction_type="auction_created",
                description="–°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞"
            )
        
        await callback.message.edit_reply_markup(reply_markup=None)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_auctions = await db.get_user_auctions(user_id)
        if not user_auctions:
            await callback.message.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞—É–∫—Ü–∏–æ–Ω –∑–∞–Ω–æ–≤–æ.")
            await callback.answer()
            return

        auction_data = user_auctions[0]  # –°–∞–º—ã–π –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞—É–∫—Ü–∏–æ–Ω–∞
        text, bidding_keyboard = await auction_timer.format_auction_text(auction_data, show_buttons=True)

        try:
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            posted_message = await _publish_auction_to_channel(auction_data, text, bidding_keyboard)
            
            if posted_message:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ
                await db.set_auction_channel_info(
                    auction_data['id'],
                    posted_message.chat.id,
                    posted_message.message_id
                )
            
            new_balance = await db.get_user_balance(user_id)
            balance_text = "‚àû (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)" if is_admin_user else f"{new_balance}"
            
            await callback.message.answer(
                f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ <a href='https://t.me/{CHANNEL_USERNAME_LINK}'>–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ –°–ü–ë</a>.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: <b>{balance_text}</b>.",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"Failed to post to channel: {e}")
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await callback.message.answer(
            "‚ùóÔ∏è –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤."
        )
    await callback.answer()


async def _publish_auction_to_channel(auction_data: dict, text: str, keyboard) -> types.Message:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∞—É–∫—Ü–∏–æ–Ω –≤ –∫–∞–Ω–∞–ª"""
    media_items = auction_data.get('media', [])
    
    if not media_items:
        return await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, reply_markup=keyboard)
    
    # –ï—Å–ª–∏ –æ–¥–Ω–æ –º–µ–¥–∏–∞ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if len(media_items) == 1:
        single = media_items[0]
        if single['type'] == 'photo':
            return await bot.send_photo(chat_id=CHANNEL_USERNAME, photo=single['file_id'], caption=text, reply_markup=keyboard)
        else:
            return await bot.send_video(chat_id=CHANNEL_USERNAME, video=single['file_id'], caption=text, reply_markup=keyboard)
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞
    # 1) –°–Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫—É–µ–º –≤–µ—Å—å –∞–ª—å–±–æ–º (–±–µ–∑ –ø–æ–¥–ø–∏—Å–µ–π)
    album = []
    for item in media_items[:10]:
        if item['type'] == 'photo':
            album.append(InputMediaPhoto(media=item['file_id']))
        else:
            album.append(InputMediaVideo(media=item['file_id']))

    try:
        await bot.send_media_group(chat_id=CHANNEL_USERNAME, media=album)
    except Exception as e:
        logging.warning(f"Failed to send media group: {e}")

    # 2) –ó–∞—Ç–µ–º –ø–æ—Å—Ç —Å –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    head_photo = None
    for item in media_items:
        if item['type'] == 'photo':
            head_photo = item['file_id']
            break

    if head_photo:
        return await bot.send_photo(chat_id=CHANNEL_USERNAME, photo=head_photo, caption=text, reply_markup=keyboard)
    else:
        return await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, reply_markup=keyboard)


# --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–æ–∫ (Callback) ---
@dp.callback_query(F.data == "buyout")
async def handle_buyout(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∫—É–ø–∞ –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
        is_subscribed = await check_user_subscription(callback.from_user.id)
        if not is_subscribed:
            await callback.answer(
                f"‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª!\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/{CHANNEL_USERNAME_LINK}", 
                show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –∫–∞–Ω–∞–ª–µ
        auction = await db.get_auction_by_channel_message(
            callback.message.chat.id, 
            callback.message.message_id
        )
        
        if not auction:
            await callback.answer("–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
            
        if auction['status'] != 'active':
            await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", show_alert=True)
            return
            
        if not auction['blitz_price']:
            await callback.answer("–ë–ª–∏—Ü-—Ü–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–∞ "–ø—Ä–æ–¥–∞–Ω"
        await db.update_auction_status(auction['id'], 'sold')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –ª–∏–¥–µ—Ä–∞
        await db.place_bid(
            auction['id'],
            callback.from_user.id,
            callback.from_user.username or callback.from_user.full_name,
            auction['blitz_price']
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if callback.from_user.username:
            buyer_display = f"@{callback.from_user.username}"
            buyer_link = f"<a href='tg://user?id={callback.from_user.id}'>{callback.from_user.full_name or callback.from_user.username}</a>"
        else:
            buyer_display = callback.from_user.full_name or f"ID: {callback.from_user.id}"
            buyer_link = f"<a href='tg://user?id={callback.from_user.id}'>{buyer_display}</a>"
        
        new_text = f"<b>{auction['description']}</b>\n\n"
        new_text += f"<b>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {auction['start_price']} ‚ÇΩ\n"
        new_text += f"<b>–ë–ª–∏—Ü-—Ü–µ–Ω–∞:</b> {auction['blitz_price']} ‚ÇΩ\n"
        new_text += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        new_text += f"<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> {auction['blitz_price']} ‚ÇΩ\n"
        new_text += f"<b>–õ–∏–¥–µ—Ä:</b> {buyer_link}\n"
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        end_time = auction['end_time']
        if isinstance(end_time, str):
            try:
                end_time = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            except ValueError:
                end_time = datetime.now()
        
        new_text += f"<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        new_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ü–†–û–î–ê–ù–û\n"
        new_text += f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {buyer_link}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
        if callback.message.caption is not None:
            await bot.edit_message_caption(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                caption=new_text,
                parse_mode="HTML"
            )
        else:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=new_text,
                parse_mode="HTML"
            )
        
        await callback.answer("–¢–æ–≤–∞—Ä –≤—ã–∫—É–ø–ª–µ–Ω –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ!")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_link = f"<a href='tg://user?id={auction['owner_id']}'>–ø—Ä–æ–¥–∞–≤—Ü–æ–º</a>"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
            is_subscribed = await check_user_subscription(callback.from_user.id)
            
            keyboard_buttons = []
            if is_subscribed:
                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∞—É–∫—Ü–∏–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
                auction_link = f"https://t.me/{CHANNEL_USERNAME_LINK}/{callback.message.message_id}"
                
                keyboard_buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=auction_link)])
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                keyboard_buttons.append([InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.replace('@', '')}")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await bot.send_message(
                chat_id=callback.from_user.id,
                text=f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                     f"–í—ã –≤—ã–∫—É–ø–∏–ª–∏ –ª–æ—Ç: <b>{auction['description']}</b>\n"
                     f"–¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: <b>{auction['blitz_price']} ‚ÇΩ</b>\n\n"
                     f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å {seller_link} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            logging.warning(f"Failed to notify buyer: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
            seller_subscribed = await check_user_subscription(auction['owner_id'])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
            keyboard_buttons = [
                [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫", callback_data=f"history_{auction['id']}")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥–ø–∏—Å–∞–Ω
            if seller_subscribed:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
                auction_link = f"https://t.me/{CHANNEL_USERNAME_LINK}/{callback.message.message_id}"
                
                keyboard_buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=auction_link)])
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                keyboard_buttons.append([InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.replace('@', '')}")])
            
            history_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await bot.send_message(
                chat_id=auction['owner_id'],
                text=f"‚úÖ <b>–õ–æ—Ç –ø—Ä–æ–¥–∞–Ω!</b>\n\n"
                     f"–í–∞—à –ª–æ—Ç <b>{auction['description']}</b> –≤—ã–∫—É–ø–ª–µ–Ω –∑–∞ <b>{auction['blitz_price']} ‚ÇΩ</b>\n"
                     f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_link}\n\n"
                     f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.",
                parse_mode="HTML",
                reply_markup=history_keyboard
            )
        except Exception as e:
            logging.warning(f"Failed to notify seller: {e}")
            
    except Exception as e:
        logging.error(f"Error processing buyout: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–∫—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query(F.data.startswith("bid:"))
async def handle_bid(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"""
    try:
        bid_amount = int(callback.data.split(":")[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
        is_subscribed = await check_user_subscription(callback.from_user.id)
        if not is_subscribed:
            await callback.answer(
                f"‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª!\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/{CHANNEL_USERNAME_LINK}", 
                show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –∫–∞–Ω–∞–ª–µ
        auction = await db.get_auction_by_channel_message(
            callback.message.chat.id, 
            callback.message.message_id
        )
        
        if not auction:
            await callback.answer("–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        if auction['status'] != 'active':
            await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", show_alert=True)
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
        new_price = auction['current_price'] + bid_amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –±–ª–∏—Ü-—Ü–µ–Ω—É
        if auction['blitz_price'] and new_price >= auction['blitz_price']:
            new_price = auction['blitz_price']
        
        # –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await db.place_bid(
            auction['id'],
            callback.from_user.id,
            callback.from_user.username or callback.from_user.full_name,
            new_price
        )
        
        if not success:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É —Å –≤–Ω–µ—à–Ω–∏–º API (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        try:
            bid_data = {
                "auction_id": auction['id'],
                "bidder_id": callback.from_user.id,
                "bidder_username": callback.from_user.username or callback.from_user.full_name,
                "amount": new_price,
                "bid_amount": bid_amount,
                "timestamp": datetime.now().isoformat()
            }
            # await api_integration.sync_bid_to_external(auction['id'], bid_data)  # –û—Ç–∫–ª—é—á–µ–Ω–æ
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É —Å –≤–Ω–µ—à–Ω–∏–º API: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω–∞
        updated_auction = await db.get_auction(auction['id'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        text, keyboard = await auction_timer.format_auction_text(updated_auction, show_buttons=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message.caption is not None:
            await bot.edit_message_caption(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await callback.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {new_price} ‚ÇΩ –ø—Ä–∏–Ω—è—Ç–∞!")
        
    except Exception as e:
        logging.error(f"Error processing bid: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞) ---
@dp.callback_query(F.data.startswith("history_"))
async def show_bidding_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤—Ü—É)"""
    try:
        auction_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª)
        if callback.message.chat.type != 'private':
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ
        auction = await db.get_auction(auction_id)
        if not auction:
            await callback.answer("–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
        if auction['owner_id'] != user_id:
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤—Ü—É.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫
        history = await db.get_bidding_history(auction_id)
        
        if not history:
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞.", show_alert=True)
            return
        
        text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫</b>\n\n"
        text += f"<b>–õ–æ—Ç:</b> {auction['description']}\n\n"
        
        for i, bid in enumerate(history[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç–∞–≤–æ–∫
            username = bid['bidder_username'] or "–ê–Ω–æ–Ω–∏–º"
            amount = bid['amount']
            created_at = bid['created_at']
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if username != "–ê–Ω–æ–Ω–∏–º":
                user_link = f"<a href='tg://user?id={bid.get('bidder_id', '')}'>@{username}</a>"
                text += f"{i}. {user_link}: <b>{amount} ‚ÇΩ</b>\n"
            else:
                text += f"{i}. @{username}: <b>{amount} ‚ÇΩ</b>\n"
            text += f"   <i>{created_at}</i>\n\n"
        
        if len(history) > 10:
            text += f"... –∏ –µ—â–µ {len(history) - 10} —Å—Ç–∞–≤–æ–∫"
        
        await callback.message.answer(text, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error showing bidding history: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫.", show_alert=True)

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@dp.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_balance"),
            InlineKeyboardButton(text="üöÄ –ê—É–∫—Ü–∏–æ–Ω—ã", callback_data="admin_auctions")
        ],
        [
            InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤", callback_data="admin_export_balances"),
            InlineKeyboardButton(text="üõí –ë–∞–π—Ç –ø–æ—Å—Ç", callback_data="admin_buy_post")
        ],
        [
            InlineKeyboardButton(text="üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤", callback_data="admin_persistence")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")
        ]
    ])
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        import aiosqlite
        async with aiosqlite.connect(db.db_path) as db_conn:
            cursor = await db_conn.execute(
                "SELECT user_id, username, full_name, balance, is_admin FROM users ORDER BY created_at DESC LIMIT 10"
            )
            users = await cursor.fetchall()
            
            text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
            for user_data in users:
                admin_mark = "üëë" if user_data[4] else "üë§"
                username = f"@{user_data[1]}" if user_data[1] else "–ë–µ–∑ username"
                text += f"{admin_mark} ID: {user_data[0]}\n"
                text += f"   {username} | –ë–∞–ª–∞–Ω—Å: {user_data[3]}\n\n"
            
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
            
            await callback.message.edit_text(text, reply_markup=back_keyboard)
            
    except Exception as e:
        logging.error(f"Error getting users: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        import aiosqlite
        async with aiosqlite.connect(db.db_path) as db_conn:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await db_conn.execute("SELECT COUNT(*) FROM users")
            total_users = (await cursor.fetchone())[0]
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã (–Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
            active_auctions = await db.get_truly_active_auctions_count()
            
            # –í—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
            cursor = await db_conn.execute("SELECT COUNT(*) FROM auctions")
            total_auctions = (await cursor.fetchone())[0]
            
            text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            text += f"üöÄ –í—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {total_auctions}\n"
            text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {active_auctions}\n"
            
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
            
            await callback.message.edit_text(text, reply_markup=back_keyboard)
            
    except Exception as e:
        logging.error(f"Error getting stats: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "admin_balance")
async def admin_balance_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    text = "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n"
    text += "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    text += "<code>/add_balance [user_id] [amount] [description]</code>\n"
    text += "–ü—Ä–∏–º–µ—Ä: <code>/add_balance 123456789 5 –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</code>\n\n"
    text += "<code>/remove_balance [user_id] [amount] [description]</code>\n"
    text += "–ü—Ä–∏–º–µ—Ä: <code>/remove_balance 123456789 2 –®—Ç—Ä–∞—Ñ</code>\n\n"
    text += "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
    text += "<code>python admin_panel.py</code>"
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "admin_auctions")
async def admin_auctions_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã (–Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        import aiosqlite
        async with aiosqlite.connect(db.db_path) as db_conn:
            cursor = await db_conn.execute(
                "SELECT id, owner_id, description, current_price, end_time FROM auctions WHERE status = 'active' AND end_time > ? ORDER BY created_at DESC LIMIT 5",
                (datetime.now(),)
            )
            auctions = await cursor.fetchall()
            
            text = "üöÄ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã:</b>\n\n"
            if auctions:
                for auction in auctions:
                    text += f"üÜî ID: {auction[0]}\n"
                    text += f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {auction[1]}\n"
                    text += f"üìù {auction[2][:50]}...\n"
                    text += f"üí∞ –¶–µ–Ω–∞: {auction[3]} ‚ÇΩ\n"
                    text += f"‚è∞ –î–æ: {auction[4]}\n\n"
            else:
                text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤"
            
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
            
            await callback.message.edit_text(text, reply_markup=back_keyboard)
            
    except Exception as e:
        logging.error(f"Error getting auctions: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤.", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "admin_export_balances")
async def admin_export_balances_callback(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ txt —Ñ–∞–π–ª"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã
        success = await balance_manager.export_balances_to_txt()
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram.types import InputFile
            with open("user_balances.txt", "rb") as file:
                await bot.send_document(
                    chat_id=user_id,
                    document=InputFile(file, filename="user_balances.txt"),
                    caption="üìÑ <b>–§–∞–π–ª —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                           "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                           "‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏\n"
                           "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                           "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏\n\n"
                           "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /export_balances"
                )
            
            await callback.answer("‚úÖ –§–∞–π–ª —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏.", show_alert=True)
            
    except Exception as e:
        logging.error(f"Error exporting balances: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å–æ–≤.", show_alert=True)

@dp.callback_query(F.data == "admin_buy_post")
async def admin_buy_post_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–π—Ç –ø–æ—Å—Ç–∞"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await state.set_state(BuyPostCreation.waiting_for_photos)
    await state.update_data(media=[])
    
    await callback.message.edit_text(
        "üõí <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–π—Ç –ø–æ—Å—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Ä–∞–∑–æ–º (–∞–ª—å–±–æ–º–æ–º) –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É. "
        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>"
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_persistence")
async def admin_persistence_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        persistence_info = auction_persistence.get_persistence_info()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
        active_count = await db.get_truly_active_auctions_count()
        
        text = "üíæ <b>–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤</b>\n\n"
        text += f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤:</b> {active_count}\n"
        
        if persistence_info.get('exists'):
            text += f"üìÅ <b>–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b> –°—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            text += f"üìä <b>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</b> {persistence_info['size']} –±–∞–π—Ç\n"
            text += f"üïí <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {persistence_info['last_modified']}\n"
        else:
            text += f"üìÅ <b>–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b> –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
        
        text += f"\n<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
        text += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
        text += f"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞\n"
        text += f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = [
            [InlineKeyboardButton(text="üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="force_save_state")],
            [InlineKeyboardButton(text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data="restore_state")],
            [InlineKeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ", callback_data="persistence_info")]
        ]
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons + [
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
        
        await callback.message.edit_text(text, reply_markup=back_keyboard)
        
    except Exception as e:
        logging.error(f"Error in admin_persistence_callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "force_save_state")
async def force_save_state_callback(callback: types.CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        success = await auction_persistence.force_save()
        
        if success:
            await callback.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.", show_alert=True)
            
    except Exception as e:
        logging.error(f"Error in force_save_state_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.", show_alert=True)

@dp.callback_query(F.data == "restore_state")
async def restore_state_callback(callback: types.CallbackQuery):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        success = await auction_persistence.restore_state()
        
        if success:
            await callback.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.", show_alert=True)
            
    except Exception as e:
        logging.error(f"Error in restore_state_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.", show_alert=True)

@dp.callback_query(F.data == "persistence_info")
async def persistence_info_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        persistence_info = auction_persistence.get_persistence_info()
        
        text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏</b>\n\n"
        
        if persistence_info.get('exists'):
            text += f"üìÅ <b>–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:</b>\n<code>{persistence_info.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>\n\n"
            text += f"üìä <b>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</b> {persistence_info['size']} –±–∞–π—Ç\n"
            text += f"üïí <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {persistence_info['last_modified']}\n"
        else:
            text += f"üìÅ <b>–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b> –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            text += f"<i>–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏</i>\n"
        
        if persistence_info.get('error'):
            text += f"\n‚ùå <b>–û—à–∏–±–∫–∞:</b> {persistence_info['error']}"
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_persistence")]
        ])
        
        await callback.message.edit_text(text, reply_markup=back_keyboard)
        
    except Exception as e:
        logging.error(f"Error in persistence_info_callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "back_to_stats")
async def back_to_stats_callback(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    user_id = callback.from_user.id
    user = await db.get_or_create_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_auctions = await db.get_user_auctions(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ (–Ω–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    active_count = await db.get_truly_active_auctions_count(user_id)
    sold_count = len([a for a in all_auctions if a['status'] == 'sold'])
    expired_count = len([a for a in all_auctions if a['status'] == 'expired'])
    
    text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    text += f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
    text += f"üöÄ <b>–í—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:</b> {len(all_auctions)}\n"
    text += f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {active_count}\n"
    text += f"‚úÖ <b>–ü—Ä–æ–¥–∞–Ω–Ω—ã—Ö:</b> {sold_count}\n"
    text += f"‚è∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:</b> {expired_count}\n"
    text += f"\nüëë <b>–°—Ç–∞—Ç—É—Å:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(text, reply_markup=admin_keyboard)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π ---
@dp.callback_query(F.data == "confirm_filtered_description")
async def confirm_filtered_description(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞"""
    data = await state.get_data()
    filtered_description = data.get('filtered_description')
    
    if not filtered_description:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(description=filtered_description)
    await state.set_state(AuctionCreation.waiting_for_price)
    
    await callback.message.edit_text(
        "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>"
    )
    await callback.answer()

@dp.callback_query(F.data == "edit_description")
async def edit_description(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n"
        "<i>‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –∏ @ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</i>\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>"
    )
    await callback.answer()

@dp.callback_query(F.data == "confirm_filtered_buy_post_description")
async def confirm_filtered_buy_post_description(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –±–∞–π—Ç –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    filtered_description = data.get('filtered_description')
    
    if not filtered_description:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(description=filtered_description)
    await state.set_state(BuyPostCreation.waiting_for_price)
    
    await callback.message.edit_text(
        "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>"
    )
    await callback.answer()

@dp.callback_query(F.data == "edit_buy_post_description")
async def edit_buy_post_description(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–π—Ç –ø–æ—Å—Ç–∞"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.).\n\n"
        "<i>‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –∏ @ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</i>\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª</i>"
    )
    await callback.answer()

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(F.text.startswith("/remove_balance"))
async def remove_balance_command(message: types.Message):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/remove_balance [user_id] [amount] [description]</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/remove_balance 123456789 2 –®—Ç—Ä–∞—Ñ</code>"
            )
            return
        
        target_user_id = int(parts[1])
        amount = int(parts[2])
        description = " ".join(parts[3:]) if len(parts) > 3 else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ"
        
        success = await db.update_user_balance(
            user_id=target_user_id,
            amount=-amount,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            transaction_type="admin_penalty",
            description=description
        )
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            new_balance = await db.get_user_balance(target_user_id)
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"–°–ø–∏—Å–∞–Ω–æ: -{amount} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    except Exception as e:
        logging.error(f"Error in remove_balance command: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.\n\n–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(F.text == "/save_state")
async def save_state_command(message: types.Message):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        success = await auction_persistence.force_save()
        
        if success:
            await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
            
    except Exception as e:
        logging.error(f"Error in save_state_command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

@dp.message(F.text == "/restore_state")
async def restore_state_command(message: types.Message):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        success = await auction_persistence.restore_state()
        
        if success:
            await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
            
    except Exception as e:
        logging.error(f"Error in restore_state_command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

@dp.message(F.text == "/persistence_info")
async def persistence_info_command(message: types.Message):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        persistence_info = auction_persistence.get_persistence_info()
        active_count = await db.get_truly_active_auctions_count()
        
        text = "üíæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏</b>\n\n"
        text += f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤:</b> {active_count}\n"
        
        if persistence_info.get('exists'):
            text += f"üìÅ <b>–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b> –°—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            text += f"üìä <b>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</b> {persistence_info['size']} –±–∞–π—Ç\n"
            text += f"üïí <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {persistence_info['last_modified']}\n"
            text += f"üìÅ <b>–ü—É—Ç—å:</b> <code>{persistence_info.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>\n"
        else:
            text += f"üìÅ <b>–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b> –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
        
        if persistence_info.get('error'):
            text += f"\n‚ùå <b>–û—à–∏–±–∫–∞:</b> {persistence_info['error']}"
        
        await message.answer(text)
        
    except Exception as e:
        logging.error(f"Error in persistence_info_command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

@dp.message(F.text == "/make_admin")
async def make_admin_command(message: types.Message):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    if user_id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        success = await db.grant_admin_status(user_id)
        
        if success:
            await message.answer(
                "‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã!\n"
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞.")
            
    except Exception as e:
        logging.error(f"Error in make_admin_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤.")

@dp.message(F.text == "/fix_admin")
async def fix_admin_command(message: types.Message):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ADMIN_USER_IDS"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    if user_id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞
        updated_count = 0
        for admin_id in ADMIN_USER_IDS:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = await db.grant_admin_status(admin_id)
            if success:
                updated_count += 1
                logging.info(f"Granted admin status to user {admin_id}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_USER_IDS:
            await set_admin_commands(admin_id)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.grant_admin_status(user_id)
        await set_admin_commands(user_id)
        
        await message.answer(
            f"‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n"
            f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {list(ADMIN_USER_IDS)}\n"
            f"–í–∞—à ID: {user_id}\n"
            "–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
        )
            
    except Exception as e:
        logging.error(f"Error in fix_admin_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤.")

@dp.message(F.text == "/export_balances")
async def export_balances_command(message: types.Message):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ txt —Ñ–∞–π–ª"""
    user_id = message.from_user.id
    user = await db.get_or_create_user(user_id)
    
    if not user['is_admin']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã
        success = await balance_manager.export_balances_to_txt()
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram.types import InputFile
            with open("user_balances.txt", "rb") as file:
                await bot.send_document(
                    chat_id=user_id,
                    document=InputFile(file, filename="user_balances.txt"),
                    caption="üìÑ <b>–§–∞–π–ª —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                           "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                           "‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏\n"
                           "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                           "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏\n\n"
                           "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /export_balances"
                )
            
            await message.answer("‚úÖ –§–∞–π–ª —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏.")
            
    except Exception as e:
        logging.error(f"Error exporting balances: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å–æ–≤.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    from aiogram.types import BotCommand
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ]
    
    await bot.set_my_commands(commands)
    logging.info("Bot commands set successfully")

async def set_admin_commands(user_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from aiogram.types import BotCommand
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_USER_IDS:
        return
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    admin_commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="add_balance", description="üëë –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
        BotCommand(command="remove_balance", description="üëë –°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="save_state", description="üëë –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"),
        BotCommand(command="restore_state", description="üëë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"),
        BotCommand(command="persistence_info", description="üëë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"),
        BotCommand(command="export_balances", description="üëë –≠–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤"),
        BotCommand(command="make_admin", description="üëë –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞"),
        BotCommand(command="fix_admin", description="üëë –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞"),
    ]
    
    try:
        await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=user_id))
        logging.info(f"Admin commands set for user {user_id}")
    except Exception as e:
        logging.error(f"Error setting admin commands for user {user_id}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π ---
# async def process_payment_notifications():
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
#     pass

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    payment_task = None  # Initialize payment_task variable
    
    try:
        logging.info("Bot is starting...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.init_db()
        logging.info("Database initialized")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await set_bot_commands()
        logging.info("Bot commands configured")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
        await auction_persistence.start()
        logging.info("Auction persistence system started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–æ–≤
        await auction_timer.start()
        logging.info("Auction timer started")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.error(f"Error starting bot: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        await auction_timer.stop()
        logging.info("Auction timer stopped")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        await auction_persistence.stop()
        logging.info("Auction persistence system stopped")
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if payment_task is not None:
            payment_task.cancel()
            logging.info("Payment notification processor stopped")
        
        await bot.session.close()
        logging.info("Bot has been stopped.")

# --- Flask webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway ---
app = Flask(__name__)

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "ok", "message": "Auction bot is running"}


@app.route('/yoomoney', methods=['POST', 'GET'])
def yoomoney_webhook():
    """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç YooMoney"""
    try:
        logging.info("=" * 50)
        logging.info("–ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –û–¢ YOOMONEY")
        logging.info(f"–ú–µ—Ç–æ–¥: {request.method}")
        logging.info(f"IP: {request.remote_addr}")
        
        if request.method == 'GET':
            return {"status": "ok", "message": "Webhook ready"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ form (–ÆMoney –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç application/x-www-form-urlencoded)
        data = request.form.to_dict()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ÆMoney: {data}")
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not data:
            logging.error("–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ÆMoney")
            return "error", 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['notification_type', 'operation_id', 'amount', 'currency', 'datetime', 'sender', 'codepro', 'sha1_hash']
        missing_fields = []
        for field in required_fields:
            if field not in data:
                missing_fields.append(field)
        
        if missing_fields:
            logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return "error", 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ label (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        if 'label' not in data:
            data['label'] = ''
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not verify_yoomoney_signature(data, YOOMONEY_SECRET, data['sha1_hash']):
            logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
            return "error", 400
        
        logging.info("‚úÖ –ü–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ (p2p –∏ —Å –∫–∞—Ä—Ç—ã)
        if data['notification_type'] not in ['p2p-incoming', 'card-incoming']:
            logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞: {data['notification_type']}")
            return "OK"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if data.get('test_notification') == 'true':
            logging.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
            return "OK"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        success = asyncio.run(process_payment(data))
        
        if success:
            logging.info("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return "OK"
        else:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
            return "error", 500
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")
        return "error", 500

@app.route('/yoomoney_debug', methods=['POST', 'GET'])
def yoomoney_debug_webhook():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π webhook –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        logging.info("=" * 50)
        logging.info("–û–¢–õ–ê–î–û–ß–ù–´–ô WEBHOOK")
        logging.info(f"–ú–µ—Ç–æ–¥: {request.method}")
        logging.info(f"IP: {request.remote_addr}")
        logging.info(f"Headers: {dict(request.headers)}")
        
        if request.method == 'GET':
            return {"status": "ok", "message": "Debug webhook ready"}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        form_data = request.form.to_dict()
        json_data = request.get_json() if request.is_json else None
        args_data = request.args.to_dict()
        
        logging.info(f"Form –¥–∞–Ω–Ω—ã–µ: {form_data}")
        logging.info(f"JSON –¥–∞–Ω–Ω—ã–µ: {json_data}")
        logging.info(f"Args –¥–∞–Ω–Ω—ã–µ: {args_data}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return {"status": "ok", "message": "Debug webhook received data", "form": form_data, "json": json_data, "args": args_data}
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º webhook: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")
        return "error", 500


def run_flask_app():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    port = int(os.getenv("PORT", 8080))
    app.run(host="0.0.0.0", port=port, debug=False)

def run_bot_with_webhook():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook —Å–µ—Ä–≤–µ—Ä–æ–º"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask_app, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –Ω–∞ Railway –∏–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook
    if os.getenv("RAILWAY_ENVIRONMENT") or os.getenv("USE_WEBHOOK", "false").lower() == "true":
        # –ù–∞ Railway –∏–ª–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º webhook - –∑–∞–ø—É—Å–∫–∞–µ–º —Å webhook
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook —Å–µ—Ä–≤–µ—Ä–æ–º...")
        run_bot_with_webhook()
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ - –æ–±—ã—á–Ω—ã–π polling
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        asyncio.run(main())