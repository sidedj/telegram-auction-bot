# –§–∞–π–ª: services.py
# –°–µ—Ä–≤–∏—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é

import asyncio
import aiosqlite
import logging
from datetime import datetime
from typing import List, Dict, Optional
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
from config import ADMIN_USER_IDS, DATABASE_PATH, CHANNEL_USERNAME_LINK

class BalanceManager:
    def __init__(self, db_path: str = "auction_bot.db"):
        self.db_path = db_path
        
    async def export_balances_to_txt(self, filename: str = "user_balances.txt") -> bool:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        """
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –±–∞–ª–∞–Ω—Å–∞–º–∏
                cursor = await db.execute("""
                    SELECT user_id, username, full_name, balance, is_admin, created_at 
                    FROM users 
                    ORDER BY created_at DESC
                """)
                users = await cursor.fetchall()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                content = []
                content.append("=" * 80)
                content.append("–ë–ê–õ–ê–ù–°–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ë–û–¢–ê –ê–£–ö–¶–ò–û–ù–û–í")
                content.append("=" * 80)
                content.append(f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
                content.append(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                content.append("=" * 80)
                content.append("")
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                content.append(f"{'ID':<12} {'Username':<20} {'–ò–º—è':<25} {'–ë–∞–ª–∞–Ω—Å':<10} {'–°—Ç–∞—Ç—É—Å':<12} {'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'}")
                content.append("-" * 100)
                
                total_balance = 0
                admin_count = 0
                regular_users = 0
                
                for user in users:
                    user_id, username, full_name, balance, is_admin, created_at = user
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    username_display = f"@{username}" if username else "–ù–µ—Ç username"
                    full_name_display = full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    status = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    if isinstance(created_at, str):
                        try:
                            created_at_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                            created_at_str = created_at_dt.strftime('%d.%m.%Y %H:%M')
                        except ValueError:
                            created_at_str = created_at
                    else:
                        created_at_str = created_at.strftime('%d.%m.%Y %H:%M') if created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
                    content.append(f"{user_id:<12} {username_display:<20} {full_name_display:<25} {balance:<10} {status:<12} {created_at_str}")
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if is_admin:
                        admin_count += 1
                    else:
                        regular_users += 1
                        total_balance += balance
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                content.append("-" * 100)
                content.append(f"{'–ò–¢–û–ì–û':<12} {'':<20} {'':<25} {total_balance:<10} {'':<12} {'':<15}")
                content.append("")
                content.append("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                content.append(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                content.append(f"  ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}")
                content.append(f"  ‚Ä¢ –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {regular_users}")
                content.append(f"  ‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
                content.append(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_balance // max(regular_users, 1)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
                content.append("=" * 80)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(content))
                
                logging.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
                return True
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return False

class NotificationManager:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token)
    
    async def send_balance_notification(self, user_id: int, amount: float, publications: int, new_balance: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        """
        try:
            message = f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!</b>\n\n"
            message += f"üí≥ –°—É–º–º–∞: {amount}‚ÇΩ\n"
            message += f"üìä –ó–∞—á–∏—Å–ª–µ–Ω–æ: {publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            message += f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
            message += f"üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã!"
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
            
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def send_auction_created_notification(self, user_id: int, auction_description: str, auction_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
        """
        try:
            message = f"üöÄ <b>–ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {auction_description[:100]}{'...' if len(auction_description) > 100 else ''}\n"
            message += f"üÜî ID –∞—É–∫—Ü–∏–æ–Ω–∞: {auction_id}\n\n"
            message += f"üìã –ê—É–∫—Ü–∏–æ–Ω –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ.\n"
            message += f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ."
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
            
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def send_auction_published_notification(self, user_id: int, auction_description: str, auction_id: int, channel_link: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
        """
        try:
            message = f"üì¢ <b>–ê—É–∫—Ü–∏–æ–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
            message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {auction_description[:100]}{'...' if len(auction_description) > 100 else ''}\n"
            message += f"üÜî ID –∞—É–∫—Ü–∏–æ–Ω–∞: {auction_id}\n\n"
            
            if channel_link:
                message += f"üîó <a href='{channel_link}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>\n\n"
            else:
                message += f"üì∫ –ê—É–∫—Ü–∏–æ–Ω —Ä–∞–∑–º–µ—â–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ\n\n"
            
            message += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏!"
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
            
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

class AdminPanel:
    def __init__(self):
        self.db = Database(DATABASE_PATH)
        
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        await self.db.init_db()
        
    async def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            await self.db.init_db()
            
            user = await self.db.get_or_create_user(user_id)
            return user
        except Exception as e:
            logging.error(f"Error getting user info: {e}")
            return None
    
    async def update_user_balance(self, user_id: int, amount: int, description: str = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ") -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            await self.db.init_db()
            
            await self.db.update_user_balance(
                user_id=user_id,
                amount=amount,
                transaction_type="admin_grant",
                description=description
            )
            return True
        except Exception as e:
            logging.error(f"Error updating user balance: {e}")
            return False
    
    async def get_all_users(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            await self.db.init_db()
            users = await self.db.get_all_users()
            return users[:limit]
        except Exception as e:
            logging.error(f"Error getting all users: {e}")
            return []
    
    async def get_auction_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
        try:
            await self.db.init_db()
            
            total_auctions = await self.db.get_total_auctions()
            active_auctions = await self.db.get_truly_active_auctions_count()
            total_users = await self.db.get_total_users()
            
            return {
                'total_auctions': total_auctions,
                'active_auctions': active_auctions,
                'total_users': total_users
            }
        except Exception as e:
            logging.error(f"Error getting auction stats: {e}")
            return {
                'total_auctions': 0,
                'active_auctions': 0,
                'total_users': 0
            }
    
    async def grant_admin_status(self, user_id: int) -> bool:
        """–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            await self.db.init_db()
            await self.db.grant_admin_status(user_id)
            return True
        except Exception as e:
            logging.error(f"Error granting admin status: {e}")
            return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def init_notifications(bot_token: str) -> NotificationManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return NotificationManager(bot_token)

async def send_auction_created_notification(bot, user_id: int, auction_description: str, auction_id: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    notification_manager = NotificationManager(bot.token)
    return await notification_manager.send_auction_created_notification(user_id, auction_description, auction_id)

async def send_auction_published_notification(bot, user_id: int, auction_description: str, auction_id: int, channel_link: str = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    notification_manager = NotificationManager(bot.token)
    return await notification_manager.send_auction_published_notification(user_id, auction_description, auction_id, channel_link)
