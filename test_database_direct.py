#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import logging
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def test_database_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π user_id
    test_user_id = 476589798
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        print(f"\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}...")
        current_balance = await db.get_user_balance(test_user_id)
        print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance}")
        
        # –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        print(f"\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (+5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π)...")
        success = await db.update_user_balance(
            user_id=test_user_id,
            amount=5,
            transaction_type="test_payment",
            description="–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å...")
        new_balance = await db.get_user_balance(test_user_id)
        print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print(f"\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        user_info = await db.get_or_create_user(test_user_id)
        print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        print(f"\n5Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        transactions = await db.get_user_transactions(test_user_id, limit=5)
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")
        for i, transaction in enumerate(transactions, 1):
            print(f"   {i}. {transaction['amount']} - {transaction['description']} ({transaction['created_at']})")
        
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_balance_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º...")
    
    db = Database()
    await db.init_db()
    
    test_user_id = 476589798
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        initial_balance = await db.get_user_balance(test_user_id)
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        print("–î–æ–±–∞–≤–ª—è–µ–º 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π...")
        success = await db.update_user_balance(
            user_id=test_user_id,
            amount=10,
            transaction_type="test_add",
            description="–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
        )
        
        if success:
            new_balance = await db.get_user_balance(test_user_id)
            print(f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
            print(f"–û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance + 10}")
            
            if new_balance == initial_balance + 10:
                print("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print("‚ùå –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    async def run_tests():
        test1 = await test_database_operations()
        test2 = await test_balance_operations()
        
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 50)
        print(f"–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if test1 else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if test2 else '‚ùå –û—à–∏–±–∫–∞'}")
        
        if test1 and test2:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    asyncio.run(run_tests())
