#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
"""

import requests
import json
import time
import hashlib

def test_tariff(amount, expected_publications, description):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"""
    print(f"\nüß™ {description}")
    print(f"   –°—É–º–º–∞: {amount}‚ÇΩ")
    print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    print("-" * 50)
    
    url = "https://web-production-fa7dc.up.railway.app/yoomoney"
    
    test_data = {
        'notification_type': 'p2p-incoming',
        'operation_id': f'test_{amount}_{int(time.time())}',
        'amount': str(amount),
        'withdraw_amount': str(amount),
        'currency': '643',
        'datetime': '2024-01-01T12:00:00.000Z',
        'sender': '41001000040',
        'codepro': 'false',
        'label': 'user_476589798',
        'test_notification': 'true'
    }
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
    sorted_keys = sorted(test_data.keys())
    string_to_sign = "&".join([f"{key}={test_data[key]}" for key in sorted_keys])
    signature = hashlib.sha1((string_to_sign + "SaTKEuJWPVXJI/JFpXDCHZ4q").encode('utf-8')).hexdigest()
    test_data['sha1_hash'] = signature
    
    try:
        response = requests.post(url, data=test_data, timeout=30)
        
        print(f"   üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   üì• –û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("   ‚úÖ Webhook: OK")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if expected_publications == 0:
                if response.text == "OK":
                    print("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: 0 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞—á–∏—Å–ª–µ–Ω–æ")
                else:
                    print("   ‚ùå –û–®–ò–ë–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            else:
                if response.text == "OK":
                    print(f"   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: {expected_publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞—á–∏—Å–ª–µ–Ω–æ")
                else:
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å {expected_publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        else:
            print("   ‚ùå Webhook: –û—à–∏–±–∫–∞")
            
        return response.status_code == 200
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_all_tariffs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤")
    print("=" * 80)
    
    # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    tariffs = [
        (50.0, 1, "1 –ø—É–±–ª–∏–∫–∞—Ü–∏—è - 50‚ÇΩ"),
        (200.0, 5, "5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π - 200‚ÇΩ"),
        (350.0, 10, "10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π - 350‚ÇΩ"),
        (600.0, 20, "20 –ø—É–±–ª–∏–∫–∞—Ü–∏–π - 600‚ÇΩ"),
    ]
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—É–º–º—ã (–¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å 0 –ø—É–±–ª–∏–∫–∞—Ü–∏–π)
    problem_amounts = [
        (25.0, 0, "25‚ÇΩ - –ù–ï –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
        (100.0, 0, "100‚ÇΩ - –ù–ï –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
        (300.0, 0, "300‚ÇΩ - –ù–ï –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
        (461.43, 0, "461.43‚ÇΩ - –ù–ï –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
        (500.0, 0, "500‚ÇΩ - –ù–ï –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
        (1000.0, 0, "1000‚ÇΩ - –ù–ï –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
    ]
    
    print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:")
    for amount, expected, description in tariffs:
        test_tariff(amount, expected, description)
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—É–º–º—ã (–¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å 0 –ø—É–±–ª–∏–∫–∞—Ü–∏–π):")
    for amount, expected, description in problem_amounts:
        test_tariff(amount, expected, description)

if __name__ == "__main__":
    test_all_tariffs()
    
    print("\n" + "=" * 80)
    print("üéâ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã,")
    print("   —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    print("   –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ Railway")
