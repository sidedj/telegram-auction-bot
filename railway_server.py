#!/usr/bin/env python3
"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway (—Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π)
"""

import os
import sys
import logging
from flask import Flask, request, jsonify
import sqlite3
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
YOOMONEY_SECRET = "SaTKEuJWPVXJI/JFpXDCHZ4q"
DATABASE_PATH = "auction_bot.db"
BOT_TOKEN = "8486386170:AAEGHCYOtGlx3TrmZ3e9vQ7p8PbtCgs0YMw"

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    balance INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_user_balance(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return 0

def update_user_balance(user_id: int, new_balance: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
            if cursor.fetchone():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("INSERT INTO users (user_id, balance, created_at) VALUES (?, ?, datetime('now'))", (user_id, new_balance))
            conn.commit()
            logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def add_transaction(user_id: int, amount: int, transaction_type: str, description: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO transactions (user_id, amount, transaction_type, description) VALUES (?, ?, ?, ?)",
                (user_id, amount, transaction_type, description)
            )
            conn.commit()
            logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Å—É–º–º–∞ {amount}, —Ç–∏–ø {transaction_type}, –æ–ø–∏—Å–∞–Ω–∏–µ {description}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∞—Å—å
            cursor.execute(
                "SELECT COUNT(*) FROM transactions WHERE user_id = ? AND transaction_type = ?",
                (user_id, transaction_type)
            )
            count = cursor.fetchone()[0]
            logger.info(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ '{transaction_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

def send_telegram_message(user_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': user_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "ok", "message": "Railway server is running"}

@app.route('/yoomoney', methods=['POST'])
def yoomoney_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆMoney"""
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆMoney")
        logger.info(f"–î–∞–Ω–Ω—ã–µ: {request.form.to_dict()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        notification_data = request.form.to_dict()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π)
        if notification_data.get('test_notification') == 'true':
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return "ok", 200
        
        # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not notification_data.get('operation_id') or not notification_data.get('datetime'):
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
            return "error", 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        if notification_data.get('unaccepted') != 'false':
            logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            return "error", 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount = float(notification_data.get('amount', 0))
        label = notification_data.get('label', '')
        
        if not label:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return "error", 400
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ label (—Ñ–æ—Ä–º–∞—Ç: user_123456)
        if not label.startswith('user_'):
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç label: {label}")
            return "error", 400
        
        try:
            user_id = int(label.replace('user_', ''))
        except ValueError:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ label: {label}")
            return "error", 400
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —Å—É–º–º–µ (—É—á–∏—Ç—ã–≤–∞—è –∫–æ–º–∏—Å—Å–∏—é –ÆMoney)
        if amount >= 48.0 and amount <= 52.0:  # 50‚ÇΩ —Å –∫–æ–º–∏—Å—Å–∏–µ–π (48.50‚ÇΩ)
            publications = 1
        elif amount >= 195.0 and amount <= 205.0:  # 200‚ÇΩ —Å –∫–æ–º–∏—Å—Å–∏–µ–π (~198‚ÇΩ)
            publications = 5
        elif amount >= 340.0 and amount <= 360.0:  # 350‚ÇΩ —Å –∫–æ–º–∏—Å—Å–∏–µ–π (~348‚ÇΩ)
            publications = 10
        elif amount >= 590.0 and amount <= 610.0:  # 600‚ÇΩ —Å –∫–æ–º–∏—Å—Å–∏–µ–π (~598‚ÇΩ)
            publications = 20
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞: {amount} ‚ÇΩ (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –ÆMoney)")
            return "error", 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        current_balance = get_user_balance(user_id)
        new_balance = current_balance + publications
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
        if amount >= 48.0 and amount <= 52.0:
            display_amount = 50
        elif amount >= 195.0 and amount <= 205.0:
            display_amount = 200
        elif amount >= 340.0 and amount <= 360.0:
            display_amount = 350
        elif amount >= 590.0 and amount <= 610.0:
            display_amount = 600
        else:
            display_amount = amount  # fallback
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        update_user_balance(user_id, new_balance)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        add_transaction(user_id, publications, 'purchase', f'–ü–æ–∫—É–ø–∫–∞ {publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ {display_amount}‚ÇΩ')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É)
        message = f"üí∞ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
        message += f"–°—É–º–º–∞: {display_amount} ‚ÇΩ\n"
        message += f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
        message += f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
        
        send_telegram_message(user_id, message)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        
        return "ok", 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return "error", 500

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Railway webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv("PORT", 8080))
    debug = os.getenv("DEBUG", "false").lower() == "true"
    
    logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üîó Webhook URL: /yoomoney")
    logger.info(f"üè• Health check: /health")
    logger.info("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ")
    
    app.run(host="0.0.0.0", port=port, debug=debug)

if __name__ == "__main__":
    main()
