#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""
import logging
from typing import Optional
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

class NotificationManager:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token)
    
    async def send_balance_notification(self, user_id: int, amount: float, publications: int, new_balance: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        """
        try:
            message = f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!</b>\n\n"
            message += f"üí≥ –°—É–º–º–∞: {amount}‚ÇΩ\n"
            message += f"üìä –ó–∞—á–∏—Å–ª–µ–Ω–æ: {publications} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            message += f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
            message += f"üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã!"
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
            
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def send_auction_created_notification(self, user_id: int, auction_description: str, auction_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
        """
        try:
            message = f"üöÄ <b>–ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {auction_description[:100]}{'...' if len(auction_description) > 100 else ''}\n"
            message += f"üÜî ID –∞—É–∫—Ü–∏–æ–Ω–∞: {auction_id}\n\n"
            message += f"üìã –ê—É–∫—Ü–∏–æ–Ω –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ.\n"
            message += f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ."
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞—É–∫—Ü–∏–æ–Ω—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã", callback_data="my_auctions")]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def send_auction_published_notification(self, user_id: int, auction_description: str, remaining_balance: int, is_admin: bool = False) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å –±–∞–ª–∞–Ω—Å–∞
        """
        try:
            message = f"‚úÖ <b>–ê—É–∫—Ü–∏–æ–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
            message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {auction_description[:100]}{'...' if len(auction_description) > 100 else ''}\n"
            message += f"üì¢ –ê—É–∫—Ü–∏–æ–Ω —Ä–∞–∑–º–µ—â–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ <a href='https://t.me/baraholka_spb'>–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ –°–ü–ë</a>\n\n"
            
            if is_admin:
                message += f"üíé –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: ‚àû (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n"
            else:
                message += f"üíé –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {remaining_balance}\n"
                message += f"üí∏ –° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ: 1 –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
            
            message += f"\nüéØ –ê—É–∫—Ü–∏–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç–∞–≤–∫–∏!"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã", callback_data="my_auctions")],
                [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance")]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def send_auction_ended_notification(self, user_id: int, auction_description: str, final_price: float, winner_id: int = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
        """
        try:
            if winner_id and winner_id != user_id:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –ø—Ä–æ–¥–∞–∂–µ
                message = f"üéâ <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                message += f"üìù –õ–æ—Ç: {auction_description[:100]}{'...' if len(auction_description) > 100 else ''}\n"
                message += f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {final_price}‚ÇΩ\n"
                message += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ID {winner_id}\n\n"
                message += f"‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω!"
            else:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ –≤—ã–∏–≥—Ä—ã—à–µ
                message = f"üèÜ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                message += f"üìù –õ–æ—Ç: {auction_description[:100]}{'...' if len(auction_description) > 100 else ''}\n"
                message += f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {final_price}‚ÇΩ\n\n"
                message += f"üéØ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏!"
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
            
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"""
        await self.bot.session.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = None

def init_notifications(bot_token: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_manager
    notification_manager = NotificationManager(bot_token)

async def send_balance_notification(user_id: int, amount: float, publications: int, new_balance: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
    if notification_manager:
        return await notification_manager.send_balance_notification(user_id, amount, publications, new_balance)
    return False

async def send_auction_created_notification(user_id: int, auction_description: str, auction_id: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    if notification_manager:
        return await notification_manager.send_auction_created_notification(user_id, auction_description, auction_id)
    return False

async def send_auction_published_notification(user_id: int, auction_description: str, remaining_balance: int, is_admin: bool = False) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    if notification_manager:
        return await notification_manager.send_auction_published_notification(user_id, auction_description, remaining_balance, is_admin)
    return False

async def send_auction_ended_notification(user_id: int, auction_description: str, final_price: float, winner_id: int = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    if notification_manager:
        return await notification_manager.send_auction_ended_notification(user_id, auction_description, final_price, winner_id)
    return False

async def close_notifications():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"""
    if notification_manager:
        await notification_manager.close()
