#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""
import asyncio
import logging
from datetime import datetime, timedelta
from yoomoney_api import YooMoneyAPI, PaymentProcessor
from config import YOOMONEY_RECEIVER, YOOMONEY_SECRET, DATABASE_PATH

class AutomaticPaymentSystem:
    def __init__(self):
        self.yoomoney_api = YooMoneyAPI(YOOMONEY_RECEIVER, YOOMONEY_SECRET)
        self.payment_processor = PaymentProcessor(self.yoomoney_api, DATABASE_PATH)
        self.is_running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        self.is_running = True
        logging.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞")
        
        while self.is_running:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                processed_count = await self.payment_processor.process_pending_payments()
                
                if processed_count > 0:
                    logging.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                else:
                    logging.debug("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É"""
        self.is_running = False
        logging.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def process_single_payment(self, operation_id: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂ –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
            operations = self.yoomoney_api.get_operation_history()
            
            # –ò—â–µ–º –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            for operation in operations:
                if operation.get('operation_id') == operation_id:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
                    data = {
                        'operation_id': operation.get('operation_id'),
                        'amount': str(operation.get('amount', 0)),
                        'currency': '643',
                        'datetime': operation.get('datetime', ''),
                        'sender': operation.get('sender', ''),
                        'codepro': 'false',
                        'label': operation.get('label', '')
                    }
                    
                    return await self.payment_processor.process_payment_from_webhook(data)
            
            logging.warning(f"–ü–ª–∞—Ç–µ–∂ {operation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")
            return False
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {operation_id}: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
payment_system = AutomaticPaymentSystem()

async def start_payment_processing():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ñ–æ–Ω–µ"""
    await payment_system.start()

async def stop_payment_processing():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    await payment_system.stop()

async def process_payment_by_id(operation_id: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    return await payment_system.process_single_payment(operation_id)
