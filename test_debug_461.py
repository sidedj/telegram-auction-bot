#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å—É–º–º—ã 461.43‚ÇΩ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import requests
import json
import time
import hashlib

def test_debug_461():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å—É–º–º—ã 461.43‚ÇΩ"""
    print("üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å—É–º–º—ã 461.43‚ÇΩ")
    print("=" * 60)
    
    # URL –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
    url = "https://web-production-fa7dc.up.railway.app/yoomoney"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–º–º—ã 461.43‚ÇΩ
    test_data = {
        'notification_type': 'p2p-incoming',
        'operation_id': f'debug_461_{int(time.time())}',
        'amount': '461.43',
        'withdraw_amount': '461.43',
        'currency': '643',
        'datetime': '2024-01-01T12:00:00.000Z',
        'sender': '41001000040',
        'codepro': 'false',
        'label': 'user_476589798',
        'test_notification': 'true'
    }
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    sorted_keys = sorted(test_data.keys())
    string_to_sign = "&".join([f"{key}={test_data[key]}" for key in sorted_keys])
    signature = hashlib.sha1((string_to_sign + "SaTKEuJWPVXJI/JFpXDCHZ4q").encode('utf-8')).hexdigest()
    test_data['sha1_hash'] = signature
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:")
    for key, value in test_data.items():
        print(f"   {key}: {value}")
    
    print(f"\nüéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0 –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª 461 –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, data=test_data, timeout=30)
        
        print(f"\nüì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Webhook: OK")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Railway –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        else:
            print("‚ùå Webhook: –û—à–∏–±–∫–∞")
            
        return response.status_code == 200
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_other_problem_amounts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—É–º–º—ã"""
    print("\nüîç –¢–µ—Å—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—É–º–º")
    print("=" * 60)
    
    url = "https://web-production-fa7dc.up.railway.app/yoomoney"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å —Å—É–º–º–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    test_cases = [
        {'amount': '25.00', 'description': '25‚ÇΩ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª 25 –ø—É–±–ª–∏–∫–∞—Ü–∏–π'},
        {'amount': '100.00', 'description': '100‚ÇΩ - –º–æ–∂–µ—Ç –¥–∞—Ç—å 100 –ø—É–±–ª–∏–∫–∞—Ü–∏–π'},
        {'amount': '300.00', 'description': '300‚ÇΩ - –º–æ–∂–µ—Ç –¥–∞—Ç—å 300 –ø—É–±–ª–∏–∫–∞—Ü–∏–π'},
        {'amount': '500.00', 'description': '500‚ÇΩ - –º–æ–∂–µ—Ç –¥–∞—Ç—å 500 –ø—É–±–ª–∏–∫–∞—Ü–∏–π'},
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. {case['description']}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: 0 –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        
        test_data = {
            'notification_type': 'p2p-incoming',
            'operation_id': f'debug_problem_{i}_{int(time.time())}',
            'amount': case['amount'],
            'withdraw_amount': case['amount'],
            'currency': '643',
            'datetime': '2024-01-01T12:00:00.000Z',
            'sender': '41001000040',
            'codepro': 'false',
            'label': 'user_476589798',
            'test_notification': 'true'
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        sorted_keys = sorted(test_data.keys())
        string_to_sign = "&".join([f"{key}={test_data[key]}" for key in sorted_keys])
        signature = hashlib.sha1((string_to_sign + "SaTKEuJWPVXJI/JFpXDCHZ4q").encode('utf-8')).hexdigest()
        test_data['sha1_hash'] = signature
        
        try:
            response = requests.post(url, data=test_data, timeout=30)
            print(f"   üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   üì• –û—Ç–≤–µ—Ç: {response.text}")
            
            if response.status_code == 200:
                print("   ‚úÖ Webhook: OK")
            else:
                print("   ‚ùå Webhook: –û—à–∏–±–∫–∞")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—É–º–º...")
    
    test_debug_461()
    test_other_problem_amounts()
    
    print("\nüéâ –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç 0 –ø—É–±–ª–∏–∫–∞—Ü–∏–π, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª 461,")
    print("   —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
    print("   1. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    print("   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–æ–≥–æ endpoint")
    print("   3. –û–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É")
    print("   4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
