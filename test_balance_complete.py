#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∞
"""

import requests
import json
import time
import hashlib

def test_complete_balance_system():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∞"""
    print("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∞")
    print("=" * 80)
    
    url = "https://web-production-fa7dc.up.railway.app/yoomoney"
    user_id = 476589798  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
    print("   1. –ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 50‚ÇΩ = 1 –ø—É–±–ª–∏–∫–∞—Ü–∏—è")
    print("   2. –í—Ç–æ—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 200‚ÇΩ = 5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π") 
    print("   3. –¢—Ä–µ—Ç—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 350‚ÇΩ = 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    print("   4. –ò—Ç–æ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: 16 –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    payments = [
        {'amount': 50.0, 'expected_publications': 1, 'description': '–ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 50‚ÇΩ = 1 –ø—É–±–ª–∏–∫–∞—Ü–∏—è'},
        {'amount': 200.0, 'expected_publications': 5, 'description': '–í—Ç–æ—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 200‚ÇΩ = 5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π'},
        {'amount': 350.0, 'expected_publications': 10, 'description': '–¢—Ä–µ—Ç—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 350‚ÇΩ = 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π'},
    ]
    
    total_expected = 0
    
    for i, payment in enumerate(payments, 1):
        print(f"\n{i}. {payment['description']}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: +{payment['expected_publications']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        total_expected += payment['expected_publications']
        print(f"   –û–±—â–∏–π –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {total_expected} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        
        test_data = {
            'notification_type': 'p2p-incoming',
            'operation_id': f'complete_test_{i}_{int(time.time())}',
            'amount': str(payment['amount']),
            'withdraw_amount': str(payment['amount']),
            'currency': '643',
            'datetime': '2024-01-01T12:00:00.000Z',
            'sender': '41001000040',
            'codepro': 'false',
            'label': f'user_{user_id}',
            'test_notification': 'true'
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        sorted_keys = sorted(test_data.keys())
        string_to_sign = "&".join([f"{key}={test_data[key]}" for key in sorted_keys])
        signature = hashlib.sha1((string_to_sign + "SaTKEuJWPVXJI/JFpXDCHZ4q").encode('utf-8')).hexdigest()
        test_data['sha1_hash'] = signature
        
        try:
            response = requests.post(url, data=test_data, timeout=30)
            
            print(f"   üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   üì• –û—Ç–≤–µ—Ç: {response.text}")
            
            if response.status_code == 200:
                print("   ‚úÖ Webhook: OK")
            else:
                print("   ‚ùå Webhook: –û—à–∏–±–∫–∞")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–ª–∞—Ç–µ–∂–∞–º–∏
        time.sleep(2)
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {total_expected} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    
    print("\n" + "=" * 80)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("\nüí° –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –±–æ—Ç–µ:")
    print("   1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    print("   2. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    print("   3. –í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    print("   4. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    print("   5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    
    print(f"\nüéâ –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è")
    print(f"   –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–µ–∑–¥–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ: {total_expected} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")

if __name__ == "__main__":
    test_complete_balance_system()
