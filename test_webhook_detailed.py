#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç webhook —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import time

def test_webhook_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç webhook"""
    print("üöÄ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç webhook")
    print("=" * 50)
    
    # URL –Ω–æ–≤–æ–≥–æ endpoint
    url = "https://web-production-fa7dc.up.railway.app/webhook"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YooMoney
    test_data = {
        'notification_type': 'card-incoming',
        'operation_id': 'test_detailed_123',
        'amount': '50.00',
        'withdraw_amount': '50.00',
        'currency': '643',
        'datetime': '2025-09-06T17:00:00.000Z',
        'sender': '41001000040',
        'codepro': 'false',
        'label': 'user_476589798',
        'test_notification': 'true',
        'sha1_hash': 'test_hash_123'
    }
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:")
    for key, value in test_data.items():
        print(f"   {key}: {value}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, data=test_data, timeout=10)
        
        print(f"\nüì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å
            print("\n‚è≥ –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...")
            check_balance_after_webhook()
            
            return True
        else:
            print("‚ùå Webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_balance_after_webhook():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ webhook"""
    import sqlite3
    import os
    
    db_path = "auction_bot.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 476589798
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (476589798,))
            result = cursor.fetchone()
            
            if result:
                balance = result[0]
                print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            cursor.execute("""
                SELECT amount, transaction_type, description, created_at 
                FROM transactions 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT 3
            """, (476589798,))
            
            transactions = cursor.fetchall()
            
            if transactions:
                print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                for trans in transactions:
                    amount, trans_type, desc, created_at = trans
                    print(f"   {created_at}: {amount} ({trans_type}) - {desc}")
            else:
                print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")

if __name__ == "__main__":
    test_webhook_detailed()
