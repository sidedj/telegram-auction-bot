# –§–∞–π–ª: api_integration.py
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API –¥–ª—è –±–æ—Ç–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
"""

import logging
from typing import Dict, Any, Optional
from api_client import AuctionAPIClient, NotificationAPIClient, PaymentAPIClient, APIClientError
from config import EXTERNAL_API_URL, EXTERNAL_API_KEY, EXTERNAL_API_TIMEOUT, API_ALLOWED_IPS

class APIIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API"""
    
    def __init__(self):
        self.api_url = EXTERNAL_API_URL
        self.api_key = EXTERNAL_API_KEY
        self.timeout = EXTERNAL_API_TIMEOUT
        self.allowed_ips = API_ALLOWED_IPS
        self.enabled = bool(self.api_url and self.api_key)
        
        if not self.enabled:
            logging.warning("API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã URL –∏–ª–∏ –∫–ª—é—á API")
        elif self.allowed_ips:
            logging.info(f"API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω IP-–∞–¥—Ä–µ—Å–∞–º–∏: {', '.join(self.allowed_ips)}")
    
    async def sync_auction_to_external(self, auction_data: Dict[str, Any]) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω —Å –≤–Ω–µ—à–Ω–∏–º API
        
        Args:
            auction_data: –î–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if not self.enabled:
            return False
        
        try:
            async with AuctionAPIClient(self.api_url, self.api_key, self.timeout, self.allowed_ips) as client:
                result = await client.create_auction(auction_data)
                logging.info(f"–ê—É–∫—Ü–∏–æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≤–Ω–µ—à–Ω–∏–º API: {result}")
                return True
                
        except APIClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
            return False
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def sync_bid_to_external(self, auction_id: int, bid_data: Dict[str, Any]) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É —Å –≤–Ω–µ—à–Ω–∏–º API
        
        Args:
            auction_id: ID –∞—É–∫—Ü–∏–æ–Ω–∞
            bid_data: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if not self.enabled:
            return False
        
        try:
            async with AuctionAPIClient(self.api_url, self.api_key, self.timeout, self.allowed_ips) as client:
                result = await client.place_bid(auction_id, bid_data)
                logging.info(f"–°—Ç–∞–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –≤–Ω–µ—à–Ω–∏–º API: {result}")
                return True
                
        except APIClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–≤–∫–∏: {e}")
            return False
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–≤–∫–∏: {e}")
            return False
    
    async def send_external_notification(self, user_id: int, message: str, notification_type: str = "info") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if not self.enabled:
            return False
        
        try:
            async with NotificationAPIClient(self.api_url, self.api_key, self.timeout, self.allowed_ips) as client:
                result = await client.send_notification(user_id, message, notification_type)
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API: {result}")
                return True
                
        except APIClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def process_external_payment(self, amount: int, currency: str, description: str, user_id: int) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            currency: –í–∞–ª—é—Ç–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.enabled:
            return None
        
        try:
            async with PaymentAPIClient(self.api_url, self.api_key, self.timeout, self.allowed_ips) as client:
                result = await client.create_payment(amount, currency, description, user_id)
                logging.info(f"–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API: {result}")
                return result
                
        except APIClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    async def get_external_auction_stats(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —Å –≤–Ω–µ—à–Ω–µ–≥–æ API
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.enabled:
            return None
        
        try:
            async with AuctionAPIClient(self.api_url, self.api_key, self.timeout, self.allowed_ips) as client:
                result = await client.get_auction_stats()
                logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å –≤–Ω–µ—à–Ω–µ–≥–æ API: {result}")
                return result
                
        except APIClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    async def health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–µ–≥–æ API
        
        Returns:
            True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if not self.enabled:
            return False
        
        try:
            async with AuctionAPIClient(self.api_url, self.api_key, self.timeout, self.allowed_ips) as client:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                await client.get('/health')
                return True
                
        except Exception as e:
            logging.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
api_integration = APIIntegration()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
async def example_integration():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º API"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if await api_integration.health_check():
        print("‚úÖ –í–Ω–µ—à–Ω–∏–π API –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await api_integration.get_external_auction_stats()
        if stats:
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await api_integration.send_external_notification(
            user_id=123456789,
            message="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            notification_type="info"
        )
        
        if success:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    else:
        print("‚ùå –í–Ω–µ—à–Ω–∏–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


if __name__ == "__main__":
    import asyncio
    asyncio.run(example_integration())
