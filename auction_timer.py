# –§–∞–π–ª: auction_timer.py
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List
from database import Database
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import CHANNEL_USERNAME_LINK

class AuctionTimer:
    def __init__(self, bot: Bot, db: Database, channel_username: str):
        self.bot = bot
        self.db = db
        self.channel_username = channel_username
        self.running = False
        self.task = None

    async def check_user_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_member = await self.bot.get_chat_member(chat_id=self.channel_username, user_id=user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            # member, administrator, creator - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
            # left, kicked - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            return chat_member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logging.error(f"Error checking subscription for user {user_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            return False

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
        if self.running:
            return
            
        self.running = True
        self.task = asyncio.create_task(self._check_auctions_loop())
        logging.info("Auction timer started")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        self.running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logging.info("Auction timer stopped")

    async def _check_auctions_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
        while self.running:
            try:
                await self._check_expired_auctions()
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logging.error(f"Error in auction timer loop: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

    async def _check_expired_auctions(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∞—É–∫—Ü–∏–æ–Ω—ã"""
        try:
            expired_auctions = await self.db.get_expired_auctions()
            
            for auction in expired_auctions:
                await self._finalize_auction(auction)
                
        except Exception as e:
            logging.error(f"Error checking expired auctions: {e}")

    async def _finalize_auction(self, auction: Dict):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω"""
        try:
            auction_id = auction['id']
            owner_id = auction['owner_id']
            current_leader_id = auction['current_leader_id']
            current_leader_username = auction['current_leader_username']
            current_price = auction['current_price']
            description = auction['description']
            channel_chat_id = auction['channel_chat_id']
            channel_message_id = auction['channel_message_id']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞
            await self.db.update_auction_status(auction_id, 'expired')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–∫—Ü–∏–æ–Ω–∞
            if current_leader_id and current_price > auction['start_price']:
                # –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
                status_text = f"üèÜ <b>–ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                status_text += f"<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> @{current_leader_username}\n"
                status_text += f"<b>–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b> {current_price} ‚ÇΩ\n\n"
                status_text += "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏."
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
                    winner_subscribed = await self.check_user_subscription(current_leader_id)
                    
                    keyboard_buttons = []
                    if winner_subscribed and channel_message_id:
                        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∞—É–∫—Ü–∏–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
                        auction_link = f"https://t.me/{CHANNEL_USERNAME_LINK}/{channel_message_id}"
                        
                        keyboard_buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=auction_link)])
                    elif not winner_subscribed:
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                        keyboard_buttons.append([InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{self.channel_username.replace('@', '')}")])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                    
                    await self.bot.send_message(
                        chat_id=current_leader_id,
                        text=f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                             f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω: <b>{description}</b>\n"
                             f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{current_price} ‚ÇΩ</b>\n\n"
                             f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.warning(f"Failed to notify winner {current_leader_id}: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
                    seller_subscribed = await self.check_user_subscription(owner_id)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
                    keyboard_buttons = [
                        [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫", callback_data=f"history_{auction_id}")]
                    ]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥–ø–∏—Å–∞–Ω
                    if seller_subscribed and channel_message_id:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
                        auction_link = f"https://t.me/{CHANNEL_USERNAME_LINK}/{channel_message_id}"
                        
                        keyboard_buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=auction_link)])
                    elif not seller_subscribed:
                        # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                        keyboard_buttons.append([InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{self.channel_username.replace('@', '')}")])
                    
                    history_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                    
                    await self.bot.send_message(
                        chat_id=owner_id,
                        text=f"‚úÖ <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                             f"–í–∞—à –ª–æ—Ç <b>{description}</b> –ø—Ä–æ–¥–∞–Ω –∑–∞ <b>{current_price} ‚ÇΩ</b>\n"
                             f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{current_leader_username}\n\n"
                             f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.",
                        reply_markup=history_keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.warning(f"Failed to notify owner {owner_id}: {e}")
                    
            else:
                # –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫
                status_text = f"‚è∞ <b>–ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                status_text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.\n"
                status_text += "–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –ø—Ä–æ–¥–∞–∂–∏."
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
                    seller_subscribed = await self.check_user_subscription(owner_id)
                    
                    keyboard_buttons = []
                    if seller_subscribed and channel_message_id:
                        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∞—É–∫—Ü–∏–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
                        auction_link = f"https://t.me/{CHANNEL_USERNAME_LINK}/{channel_message_id}"
                        
                        keyboard_buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=auction_link)])
                    elif not seller_subscribed:
                        # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                        keyboard_buttons.append([InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{self.channel_username.replace('@', '')}")])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                    
                    await self.bot.send_message(
                        chat_id=owner_id,
                        text=f"‚è∞ <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                             f"–í–∞—à –ª–æ—Ç <b>{description}</b> –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫.\n\n"
                             f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω.",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.warning(f"Failed to notify owner {owner_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫)
            if channel_chat_id and channel_message_id:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    await self.bot.edit_message_text(
                        chat_id=channel_chat_id,
                        message_id=channel_message_id,
                        text=status_text
                    )
                    
                except Exception as e:
                    logging.error(f"Failed to update channel message: {e}")
            
            # –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –ø—Ä–æ–¥–∞–∂–µ
                    
        except Exception as e:
            logging.error(f"Error finalizing auction {auction.get('id', 'unknown')}: {e}")


    async def get_auction_time_left(self, end_time) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if isinstance(end_time, str):
            try:
                end_time = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                return "–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"
        
        now = datetime.now()
        if end_time <= now:
            return "–ó–∞–≤–µ—Ä—à–µ–Ω"
            
        delta = end_time - now
        days = delta.days
        hours, remainder = divmod(delta.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"

    async def format_auction_text(self, auction: Dict, show_buttons: bool = True) -> tuple[str, InlineKeyboardMarkup]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∞—É–∫—Ü–∏–æ–Ω–∞"""
        time_left = await self.get_auction_time_left(auction['end_time'])
        
        text = f"<b>{auction['description']}</b>\n\n"
        text += f"<b>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {auction['start_price']} ‚ÇΩ\n"
        
        if auction['blitz_price']:
            text += f"<b>–ë–ª–∏—Ü-—Ü–µ–Ω–∞:</b> {auction['blitz_price']} ‚ÇΩ\n"
            
        text += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        text += f"<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> {auction['current_price']} ‚ÇΩ\n"
        
        if auction['current_leader_username'] and auction.get('current_leader_id'):
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ª–∏–¥–µ—Ä–∞
            leader_link = f"<a href='tg://user?id={auction['current_leader_id']}'>@{auction['current_leader_username']}</a>"
            text += f"<b>–õ–∏–¥–µ—Ä:</b> {leader_link}\n"
        elif auction['current_leader_username']:
            text += f"<b>–õ–∏–¥–µ—Ä:</b> @{auction['current_leader_username']}\n"
        else:
            text += f"<b>–õ–∏–¥–µ—Ä:</b> -\n"
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º end_time –≤ datetime –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        end_time = auction['end_time']
        if isinstance(end_time, str):
            try:
                end_time = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            except ValueError:
                end_time = datetime.now()  # Fallback
        
        text += f"<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left}\n\n"
        
        if auction['status'] == 'active':
            text += "‚ö†Ô∏è–¢–æ–≤–∞—Ä –ø—Ä–æ–¥–∞—ë—Ç—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –∞—É–∫—Ü–∏–æ–Ω–∞! –í–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç!"
        elif auction['status'] == 'sold':
            text += "‚úÖ <b>–ü–†–û–î–ê–ù–û</b>"
        elif auction['status'] == 'expired':
            text += "‚è∞ <b>–ó–ê–í–ï–†–®–ï–ù</b>"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = None
        if show_buttons and auction['status'] == 'active':
            from bot import get_bidding_keyboard
            keyboard = get_bidding_keyboard(auction['blitz_price'])
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        
        return text, keyboard
