#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooMoney webhook
"""

import requests
import json
import hashlib
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_URL = "https://telegabot-production-3c68.up.railway.app/yoomoney"
YOOMONEY_SECRET = "SaTKEuJWPVXJI/JFpXDCHZ4q"
USER_ID = 7647551803  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def create_test_payment(amount=50.00, operation_id=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞"""
    if operation_id is None:
        operation_id = f"test_payment_{int(time.time())}"
    
    # –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_data = {
        'notification_type': 'p2p-incoming',
        'operation_id': operation_id,
        'amount': str(amount),
        'currency': '643',
        'datetime': '2025-09-06T08:58:00Z',
        'sender': '4100118987681575',
        'codepro': 'false',
        'unaccepted': 'false',
        'label': f'user_{USER_ID}',
        'test_notification': 'false'  # –†–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
    if YOOMONEY_SECRET:
        check_string = f"{payment_data['notification_type']}&{payment_data['operation_id']}&{payment_data['amount']}&{payment_data['currency']}&{payment_data['datetime']}&{payment_data['sender']}&{payment_data['codepro']}&{payment_data['label']}&{YOOMONEY_SECRET}"
        sha1_hash = hashlib.sha1(check_string.encode()).hexdigest()
        payment_data['sha1_hash'] = sha1_hash
    
    return payment_data

def test_payment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ webhook...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    payment_data = create_test_payment(amount=50.00)
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {json.dumps(payment_data, indent=2, ensure_ascii=False)}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            WEBHOOK_URL,
            data=payment_data,
            timeout=30
        )
        
        print(f"üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_duplicate_payment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ operation_id
    operation_id = f"duplicate_test_{int(time.time())}"
    
    # –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
    print("1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂:")
    payment_data1 = create_test_payment(amount=50.00, operation_id=operation_id)
    response1 = requests.post(WEBHOOK_URL, data=payment_data1, timeout=30)
    print(f"   –°—Ç–∞—Ç—É—Å: {response1.status_code}")
    print(f"   –û—Ç–≤–µ—Ç: {response1.text}")
    
    # –í—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂ (–¥—É–±–ª–∏–∫–∞—Ç)
    print("2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂ (–¥—É–±–ª–∏–∫–∞—Ç):")
    payment_data2 = create_test_payment(amount=50.00, operation_id=operation_id)
    response2 = requests.post(WEBHOOK_URL, data=payment_data2, timeout=30)
    print(f"   –°—Ç–∞—Ç—É—Å: {response2.status_code}")
    print(f"   –û—Ç–≤–µ—Ç: {response2.text}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
    print(f"üåê Webhook URL: {WEBHOOK_URL}")
    print(f"üë§ User ID: {USER_ID}")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    test_payment()
    
    # –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    test_duplicate_payment()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
