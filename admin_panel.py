# –§–∞–π–ª: admin_panel.py
# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º

import asyncio
import logging
from datetime import datetime
from typing import List, Dict, Optional
from database import Database
from config import ADMIN_USER_IDS, DATABASE_PATH

class AdminPanel:
    def __init__(self):
        self.db = Database(DATABASE_PATH)
        
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        await self.db.init_db()
        
    async def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = await self.db.get_or_create_user(user_id)
            return user
        except Exception as e:
            logging.error(f"Error getting user info: {e}")
            return None
    
    async def update_user_balance(self, user_id: int, amount: int, description: str = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ") -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.db.update_user_balance(
                user_id=user_id,
                amount=amount,
                transaction_type="admin_grant",
                description=description
            )
            return True
        except Exception as e:
            logging.error(f"Error updating user balance: {e}")
            return False
    
    async def get_all_users(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async with self.db.db_path as db:
                cursor = await db.execute(
                    "SELECT user_id, username, full_name, balance, created_at, is_admin FROM users ORDER BY created_at DESC LIMIT ?",
                    (limit,)
                )
                users = await cursor.fetchall()
                
                result = []
                for user in users:
                    result.append({
                        'user_id': user[0],
                        'username': user[1],
                        'full_name': user[2],
                        'balance': user[3],
                        'created_at': user[4],
                        'is_admin': bool(user[5])
                    })
                
                return result
        except Exception as e:
            logging.error(f"Error getting all users: {e}")
            return []
    
    async def get_user_auctions(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return await self.db.get_user_auctions(user_id)
        except Exception as e:
            logging.error(f"Error getting user auctions: {e}")
            return []
    
    async def get_auction_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º"""
        try:
            async with self.db.db_path as db:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
                cursor = await db.execute("SELECT COUNT(*) FROM auctions")
                total_auctions = (await cursor.fetchone())[0]
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
                cursor = await db.execute("SELECT COUNT(*) FROM auctions WHERE status = 'active'")
                active_auctions = (await cursor.fetchone())[0]
                
                # –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
                cursor = await db.execute("SELECT COUNT(*) FROM auctions WHERE status = 'sold'")
                sold_auctions = (await cursor.fetchone())[0]
                
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
                cursor = await db.execute("SELECT COUNT(*) FROM auctions WHERE status = 'expired'")
                expired_auctions = (await cursor.fetchone())[0]
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor = await db.execute("SELECT COUNT(*) FROM users")
                total_users = (await cursor.fetchone())[0]
                
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
                cursor = await db.execute("SELECT COUNT(*) FROM users WHERE is_admin = TRUE")
                admin_users = (await cursor.fetchone())[0]
                
                return {
                    'total_auctions': total_auctions,
                    'active_auctions': active_auctions,
                    'sold_auctions': sold_auctions,
                    'expired_auctions': expired_auctions,
                    'total_users': total_users,
                    'admin_users': admin_users
                }
        except Exception as e:
            logging.error(f"Error getting auction stats: {e}")
            return {}
    
    async def grant_admin_status(self, user_id: int) -> bool:
        """–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            await self.db.grant_admin_status(user_id)
            return True
        except Exception as e:
            logging.error(f"Error granting admin status: {e}")
            return False
    
    async def get_recent_transactions(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            async with self.db.db_path as db:
                cursor = await db.execute(
                    """SELECT t.id, t.user_id, u.username, u.full_name, t.amount, 
                       t.transaction_type, t.description, t.created_at 
                       FROM transactions t 
                       LEFT JOIN users u ON t.user_id = u.user_id 
                       ORDER BY t.created_at DESC LIMIT ?""",
                    (limit,)
                )
                transactions = await cursor.fetchall()
                
                result = []
                for trans in transactions:
                    result.append({
                        'id': trans[0],
                        'user_id': trans[1],
                        'username': trans[2],
                        'full_name': trans[3],
                        'amount': trans[4],
                        'transaction_type': trans[5],
                        'description': trans[6],
                        'created_at': trans[7]
                    })
                
                return result
        except Exception as e:
            logging.error(f"Error getting recent transactions: {e}")
            return []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏
async def console_admin_panel():
    """–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    admin = AdminPanel()
    await admin.init_db()
    
    print("üîß –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –ë–û–¢–ê –ê–£–ö–¶–ò–û–ù–û–í")
    print("=" * 50)
    
    while True:
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("2. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        print("4. –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("5. –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        print("6. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        print("7. –ê—É–∫—Ü–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("8. –°–æ–∑–¥–∞—Ç—å –±–∞–π—Ç –ø–æ—Å—Ç")
        print("0. –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-8): ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            elif choice == "1":
                await show_stats(admin)
                
            elif choice == "2":
                await show_users(admin)
                
            elif choice == "3":
                await show_user_info(admin)
                
            elif choice == "4":
                await update_balance(admin)
                
            elif choice == "5":
                await grant_admin(admin)
                
            elif choice == "6":
                await show_transactions(admin)
                
            elif choice == "7":
                await show_user_auctions(admin)
                
            elif choice == "8":
                await create_buy_post(admin)
                
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def show_stats(admin: AdminPanel):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = await admin.get_auction_stats()
    if stats:
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:")
        print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}")
        print(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats.get('admin_users', 0)}")
        print(f"üöÄ –í—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {stats.get('total_auctions', 0)}")
        print(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_auctions', 0)}")
        print(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–Ω—ã—Ö: {stats.get('sold_auctions', 0)}")
        print(f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats.get('expired_auctions', 0)}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

async def show_users(admin: AdminPanel):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = await admin.get_all_users(50)
    if users:
        print(f"\nüë• –ü–û–°–õ–ï–î–ù–ò–ï {len(users)} –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        print("-" * 80)
        for user in users:
            admin_mark = "üëë" if user['is_admin'] else "üë§"
            username = f"@{user['username']}" if user['username'] else "–ë–µ–∑ username"
            print(f"{admin_mark} ID: {user['user_id']} | {username} | –ë–∞–ª–∞–Ω—Å: {user['balance']} | {user['created_at']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def show_user_info(admin: AdminPanel):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
        user = await admin.get_user_info(user_id)
        if user:
            print(f"\nüë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:")
            print(f"ID: {user['user_id']}")
            print(f"Username: @{user['username']}" if user['username'] else "Username: –ù–µ —É–∫–∞–∑–∞–Ω")
            print(f"–ò–º—è: {user['full_name']}" if user['full_name'] else "–ò–º—è: –ù–µ —É–∫–∞–∑–∞–Ω–æ")
            print(f"–ë–∞–ª–∞–Ω—Å: {user['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if user['is_admin'] else '–ù–µ—Ç'}")
            print(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at']}")
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

async def update_balance(admin: AdminPanel):
    """–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
        amount = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è): "))
        description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip() or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"
        
        success = await admin.update_user_balance(user_id, amount, description)
        if success:
            user = await admin.get_user_info(user_id)
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

async def grant_admin(admin: AdminPanel):
    """–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
        success = await admin.grant_admin_status(user_id)
        if success:
            print("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω—ã!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

async def show_transactions(admin: AdminPanel):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    transactions = await admin.get_recent_transactions(20)
    if transactions:
        print(f"\nüí∞ –ü–û–°–õ–ï–î–ù–ò–ï {len(transactions)} –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:")
        print("-" * 100)
        for trans in transactions:
            username = f"@{trans['username']}" if trans['username'] else "–ë–µ–∑ username"
            amount_str = f"+{trans['amount']}" if trans['amount'] > 0 else str(trans['amount'])
            print(f"ID: {trans['user_id']} | {username} | {amount_str} | {trans['transaction_type']} | {trans['created_at']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")

async def show_user_auctions(admin: AdminPanel):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
        auctions = await admin.get_user_auctions(user_id)
        if auctions:
            print(f"\nüöÄ –ê–£–ö–¶–ò–û–ù–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}:")
            print("-" * 80)
            for auction in auctions:
                status_emoji = {"active": "üü¢", "sold": "‚úÖ", "expired": "‚è∞", "deleted": "‚ùå"}.get(auction['status'], "‚ùì")
                print(f"{status_emoji} ID: {auction['id']} | {auction['description'][:50]}... | –¶–µ–Ω–∞: {auction['current_price']}‚ÇΩ | {auction['status']}")
        else:
            print("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤")
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

async def create_buy_post(admin: AdminPanel):
    """–°–æ–∑–¥–∞—Ç—å –±–∞–π—Ç –ø–æ—Å—Ç"""
    print("\nüõí –°–û–ó–î–ê–ù–ò–ï –ë–ê–ô–¢ –ü–û–°–¢–ê")
    print("-" * 40)
    print("–í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π, –≤–µ–¥—É—â–µ–π –Ω–∞ –∫–∞–Ω–∞–ª @baraxolkavspb")
    print("–ë–∞–π—Ç –ø–æ—Å—Ç—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –ø—Ä—è–º—ã—Ö –ø—Ä–æ–¥–∞–∂ –±–µ–∑ –∞—É–∫—Ü–∏–æ–Ω–∞.")
    print()
    
    try:
        description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ").strip()
        if not description:
            print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
            
        price = int(input("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö: "))
        if price <= 0:
            print("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        print(f"\nüìù –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ë–ê–ô–¢ –ü–û–°–¢–ê:")
        print("-" * 40)
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"–¶–µ–Ω–∞: {price} ‚ÇΩ")
        print(f"–ö–Ω–æ–ø–∫–∞: üõí –ö—É–ø–∏—Ç—å (–≤–µ–¥–µ—Ç –Ω–∞ @baraxolkavspb)")
        print()
        
        confirm = input("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–∞–π—Ç –ø–æ—Å—Ç? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if confirm in ['–¥–∞', 'yes', 'y', '–¥']:
            print("‚úÖ –ë–∞–π—Ç –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω!")
            print("üì¢ –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @baraxolkavspb")
            print("üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞")
        else:
            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–π—Ç –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–π—Ç –ø–æ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏...")
    asyncio.run(console_admin_panel())
